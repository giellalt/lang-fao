## Process this file with automake to produce Makefile.in

## Copyright (C) 2011 Samediggi

## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.

####### Source file defs: ########

# need to check way to list build targets like automake
#! @param GT_FILTER_SRCS required, contains all local additions
EXTRA_DIST=$(GT_FILTER_SRCS)

####### Automake targets: ########

# @param GT_FILTER_TARGETS required
noinst_DATA=$(GT_FILTER_TARGETS)
BUILT_SOURCES=$(GENERATED_REGEXES)
CLEANFILES=$(GENERATED_REGEXES)

# The or construction needs to be put into a variable for the parentheses to
# survive 'make' and be visible to the shell - this at the same time silences
# grep.
GREPTAGSCOMMAND=( grep -E '(^\+.|.\+$$)' || echo '+NoTagsFound' )

# Variable to hold filenames for files containing all tags used
# (all symbols starting with '+')
GT_TAGS=
if CAN_HFST
GT_TAGS+=gttags.txt

gttags.txt: $(top_builddir)/src/morphology/$(GTLANG).lexc.hfst
	$(AM_V_GEN)$(HFST_SUMMARIZE) -v $^ \
		| grep -A1 '^sigma set' \
		| grep -F '+' \
		| tr ' ' '\n' \
		| sed 's/,$$//g' \
		| $(GREPTAGSCOMMAND) \
		> $@

else

if CAN_XFST
GT_TAGS+=gttags.txt

gttags.txt: $(top_builddir)/src/morphology/$(GTLANG).lexc.xfst
	$(AM_V_GEN)$(XFST) -q \
			-e "load stack $^" \
			-e "print sigma" \
			-stop \
		| grep -v '^Size' \
		| tr ' ' '\n' \
		| sort \
		| grep -v '^$$' \
		| grep -v '^Sigma:' \
		| $(GREPTAGSCOMMAND) \
		> $@

endif # CAN_XFST
endif # CAN_HFST

####### Build rules for building dialect filters: #######
if HAVE_DIALECTS

DIALECT_PREFIXES=$(addprefix remove-all_dialects_but_,$(DIALECTS))
DIALECT_SUFFIXES=$(addsuffix -strings,$(DIALECT_PREFIXES))
DIALECT_REGEXES=$(addsuffix .regex,$(DIALECT_SUFFIXES))
DIALECT_TARGETS_XFST=$(addsuffix .xfst,$(DIALECT_SUFFIXES))
DIALECT_TARGETS_HFST=$(addsuffix .hfst,$(DIALECT_SUFFIXES))

endif # HAVE_DIALECTS

######## Build rules for extracting tags: ########
##
## Add  one  target  for each  type of  tags to be
## extracted, specifying  the string  to match the
## tag set as the last option in the command. This
## is safe even for languages not using a specific
## tag set,  as a default  dummy tag  will be used
## instead,  and  the  resulting  filter  will  be 
## harmless   (unless  a  language  uses  the  tag
## +Sem/DummyTag, +Dial/DummyTag, etc.).

semantic-tags.txt: $(GT_TAGS)
	$(AM_V_GEN)$(GTCORE)/scripts/extract-tags.sh $< $@ +Sem/

dialect-tags.txt: $(GT_TAGS)
	$(AM_V_GEN)$(GTCORE)/scripts/extract-tags.sh $< $@ +Dial/

derivation-tags.txt: $(GT_TAGS)
	$(AM_V_GEN)$(GTCORE)/scripts/extract-tags.sh $< $@ +Der/

####### Build rules for creating regexes from tag list: #######

# Create regex from tag list for making that tag list optional.
# The conditional is there to allow for tag list specific shell scripts, ie only
# optional in certain contexts. If not found, it will fall back to a default
# shell script.
make-optional-%-tags.regex: %-tags.txt
	$(AM_V_GEN)if \
		test -e $(GTCORE)/scripts/taglist2make_optional_$*_tags_regex.sh ; \
		then \
			$(GTCORE)/scripts/taglist2make_optional_$*_tags_regex.sh $< > $@ ; \
		else \
			$(GTCORE)/scripts/taglist2make_optional_tags_regex.sh $< > $@ ; \
		fi

# Create regex from tag list for removing the tags in the tag list from the fst.
# The conditional is there to allow for tag list specific shell scripts, ie only
# remove in certain contexts. If not found, it will fall back to a default
# shell script.
remove-%-tags.regex: %-tags.txt
	$(AM_V_GEN)if test -e $(GTCORE)/scripts/taglist2remove_$*_tags_regex.sh ; \
		then \
			$(GTCORE)/scripts/taglist2remove_$*_tags_regex.sh $< > $@ ; \
		else \
			$(GTCORE)/scripts/taglist2remove_tags_regex.sh $< > $@ ; \
		fi

# Remove strings specific to other dialects than the requested one:
remove-all_dialects_but_%-strings.regex:
	$(AM_V_GEN)$(GTCORE)/scripts/generate-dialect-filter-regex.sh \
		$@ $* "$(DIALECTS)"

### Remove strings with tags as specified:
# Specific variant - take into account an exception file:
remove-%-strings.regex: %-tags.txt \
						remove-%-strings-modifications.regex
	$(AM_V_GEN)$(GTCORE)/scripts/taglist2remove_$*_strings_regex.sh \
		$@ $^

# General variant - remove all strings without exception:
remove-%-strings.regex: %-tags.txt
	$(AM_V_GEN)$(GTCORE)/scripts/taglist2remove_$*_strings_regex.sh \
		$@ $^

####### HFST build rules: ########
.regex.hfst:
	$(AM_V_RGX2FST)$(HFST_REGEXP2FST) $(VERBOSITY) $(HFST_FLAGS) -S -i $< -o $@

%.hfst: $(GTCORE)/gtdshared/common/src/filters/%.regex
	$(AM_V_RGX2FST)$(HFST_REGEXP2FST) $(VERBOSITY) $(HFST_FLAGS) -S -i $< -o $@

####### Xerox build rules: #######
.regex.xfst:
	$(AM_V_XFST)$(PRINTF) "read regex @re\"$<\";\nsave stack $@\nquit\n" |\
		$(XFST) $(VERBOSITY) $(XFSTFLAGS)

%.xfst: $(GTCORE)/gtdshared/common/src/filters/%.regex
	$(AM_V_XFST)$(PRINTF) "read regex @re\"$<\";\nsave stack $@\nquit\n" |\
		$(XFST) $(VERBOSITY) $(XFSTFLAGS)

####### Other targets: ###########
clean-local:
	-rm -f *.hfst *.xfst *.txt

include $(top_srcdir)/am-shared/silent_build-include.am

# vim: set ft=automake:
