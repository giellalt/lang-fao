## Include this file in top-level srcdir to compile FSTs
## Copyright: SÃ¡mediggi/Divvun/UiT
## Licence: GPL v3+

####### Automake targets: ########

APERTIUM_ANALYSER_HFST=
APERTIUM_ANALYSERS_GT_HFST=
APERTIUM_ANALYSERS_AP_HFST=
APERTIUM_ANALYSERS_ATTGZ=

APERTIUM_GENERATORS_HFST=
APERTIUM_GENERATOR_ATTGZ=
APERTIUM_CG_BIN=

# The list of target languages are taken from configure.ac:
# TARGET_LANGS="sma smj nob"
TARGET_LANGS=$(MT_AP_TARGET_LANGS)

if WANT_APERTIUM
# This is just a generic analyser. You need to add pair-specific analysers to
# the language-specific part further down.
APERTIUM_ANALYSER_HFST+=analyser-mt-gt-desc.hfst

# Build list of target language transducers from the list of target languages:
# => analyser-mt-gt-desc.nob.hfst etc.
APERTIUM_ANALYSERS_GT_HFST+=\
	$(addsuffix .hfst,$(addprefix analyser-mt-gt-desc.,$(TARGET_LANGS)))

# Build list of apertium tagged files by replacing -gt- with -apertium-:
# analyser-mt-gt-desc.nob.hfst => analyser-mt-apertium-desc.nob.hfst etc.
APERTIUM_ANALYSERS_AP_HFST+=\
	$(subst -gt-,-apertium-,$(APERTIUM_ANALYSERS_GT_HFST))

# Build list of att.gz files by adding the suffix .att.gz to the basenames
# of the filenames:
# analyser-mt-apertium-desc.nob.hfst => analyser-mt-apertium-desc.nob.att.gz
APERTIUM_ANALYSERS_ATTGZ+=\
	$(addsuffix .att.gz,$(basename $(APERTIUM_ANALYSERS_AP_HFST)))

# Build a list of Apertium style target filenames:
# "sma smj nob" -> "sme-nob, etc":
AP_PAIRS=$(addprefix sme-,$(TARGET_LANGS))
# "sme-nob" -> "sme-nob.sme-nob":
AP_EXPANDED_PAIRS=$(foreach pair,$(AP_PAIRS),$(addprefix $(pair).,$(pair)))
# "sme-nob.sme-nob" -> "apertium-sme-nob.sme-nob":
AP_PRE_EXP_PAIRS=$(addprefix apertium-,$(AP_EXPANDED_PAIRS))
# "apertium-sme-nob.sme-nob" -> "apertium-sme-nob.sme-nob.LR.att.gz":
APERTIUM_MORPH_PAIRS=$(addsuffix .LR.att.gz,$(AP_PRE_EXP_PAIRS))

# Apertium style target filenames with stem variable % instead of target
# language, used in pattern rule below:
# "sme-nob" -> "sme-%.sme-nob":
AP_EXPANDED_PAIRS_V=$(addprefix $(GTLANG)-%.,$(AP_PAIRS))
# "sme-%.sme-nob" -> "apertium-sme-%.sme-nob":
AP_PRE_EXP_PAIRS_V=$(addprefix apertium-,$(AP_EXPANDED_PAIRS_V))
# "apertium-sme-%.sme-nob" -> "apertium-sme-%.sme-nob.LR.att.gz":
APERTIUM_MORPH_PAIRS_V=$(addsuffix .LR.att.gz,$(AP_PRE_EXP_PAIRS_V))

APERTIUM_GENERATORS_HFST+=generator-mt-gt-norm.hfst \
						  generator-mt-apertium-norm.hfst

APERTIUM_GENERATOR_ATTGZ+=apertium-$(GTLANG).$(GTLANG).RL.att.gz

APERTIUM_CG_BIN+=sme.mor.rlx.bin \
				 sme.syn.rlx.bin
#				 sme.dep.rlx.bin

# Apertium - GTDivvun filename correspondences:
# apertium-sme-nob.sme-nob.LR.att.gz = analyser-mt-apertium-desc.nob.att.gz
# apertium-sme.sme.RL.att.gz = generator-mt-apertium-norm.att.gz
# sme.mor.rlx.bin = disambiguation-mt-apertium.bin
# sme.syn.rlx.bin = functions-mt-apertium.bin
# sme.dep.rlx.bin = dependency-mt-apertium.bin

endif # WANT_APERTIUM


if CAN_HFST
hfstdatadir=$(datadir)/giella/$(GTLANG)
noinst_DATA=$(APERTIUM_ANALYSER_HFST) \
			$(APERTIUM_ANALYSERS_GT_HFST) \
			$(APERTIUM_ANALYSERS_AP_HFST) \
			$(APERTIUM_GENERATORS_HFST)
hfstdata_DATA=$(APERTIUM_MORPH_PAIRS) \
			  $(APERTIUM_GENERATOR_ATTGZ) \
			  $(APERTIUM_CG_BIN)
endif # CAN_HFST

# Apertium generator - GTD tags. All filtering happens here:
generator-mt-gt-norm.tmp.hfst: $(top_builddir)/src/generator-raw-gt-desc.hfst \
			$(top_builddir)/src/filters/make-optional-semantic-tags.hfst      \
			$(top_builddir)/src/filters/remove-derivation-position-tags.hfst  \
			$(top_builddir)/src/filters/remove-dialect-tags.hfst              \
			$(top_builddir)/src/filters/remove-homonymy-tags.hfst             \
			$(top_builddir)/src/filters/remove-variant-tags.hfst              \
			$(top_builddir)/src/filters/remove-norm-comp-tags.hfst            \
			$(top_builddir)/src/filters/remove-number-string-tags.hfst        \
			$(top_builddir)/src/filters/remove-NG-strings.hfst                \
			$(top_builddir)/src/filters/remove-usage-tags.hfst                \
			$(top_builddir)/src/filters/remove-sub-forms.hfst                 \
			$(top_builddir)/src/filters/remove-orthography-tags.hfst          \
			$(top_builddir)/src/filters/remove-Orth_IPA-strings.hfst          \
			$(top_builddir)/src/filters/remove-orig_lang-tags.hfst            \
			$(top_builddir)/src/filters/remove-hyphenation-marks.hfst         \
			$(top_builddir)/src/filters/remove-infl_deriv-borders.hfst        \
			$(top_builddir)/src/filters/remove-word-boundary.hfst
	$(AM_V_RGX2FST)$(PRINTF) "\
		@\"$(top_builddir)/src/filters/make-optional-semantic-tags.hfst\"     \
	.o. @\"$(top_builddir)/src/filters/remove-derivation-position-tags.hfst\" \
	.o. @\"$(top_builddir)/src/filters/remove-dialect-tags.hfst\"             \
	.o. @\"$(top_builddir)/src/filters/remove-homonymy-tags.hfst\"            \
	.o. @\"$(top_builddir)/src/filters/remove-variant-tags.hfst\"             \
	.o. @\"$(top_builddir)/src/filters/remove-norm-comp-tags.hfst\"           \
	.o. @\"$(top_builddir)/src/filters/remove-number-string-tags.hfst\"       \
	.o. @\"$(top_builddir)/src/filters/remove-usage-tags.hfst\"               \
	.o. @\"$(top_builddir)/src/filters/remove-sub-forms.hfst\"                \
	.o. @\"$(top_builddir)/src/filters/remove-NG-strings.hfst\"               \
	.o. @\"$(top_builddir)/src/filters/remove-orig_lang-tags.hfst\"           \
	.o. @\"$(top_builddir)/src/filters/remove-orthography-tags.hfst\"         \
	.o. @\"$(top_builddir)/src/filters/remove-Orth_IPA-strings.hfst\"         \
	.o. @\"$<\" \
	.o. @\"$(top_builddir)/src/filters/remove-word-boundary.hfst\"            \
	.o. @\"$(top_builddir)/src/filters/remove-hyphenation-marks.hfst\"        \
	.o. @\"$(top_builddir)/src/filters/remove-infl_deriv-borders.hfst\"       \
	;" \
		| $(HFST_REGEXP2FST) $(HFST_FLAGS) -S --harmonize-flags \
		> $@

# Apertium analyser - GTD tags. Target language independent filtering
# happens here:
analyser-mt-gt-desc.tmp.hfst: $(top_builddir)/src/generator-raw-gt-desc.hfst \
			$(top_builddir)/src/filters/remove-derivation-position-tags.hfst \
			$(top_builddir)/src/filters/remove-dialect-tags.hfst             \
			$(top_builddir)/src/filters/remove-homonymy-tags.hfst            \
			$(top_builddir)/src/filters/remove-variant-tags.hfst             \
			$(top_builddir)/src/filters/remove-norm-comp-tags.hfst           \
			$(top_builddir)/src/filters/remove-number-string-tags.hfst       \
			$(top_builddir)/src/filters/remove-usage-tags.hfst               \
			$(top_builddir)/src/filters/remove-hyphenation-marks.hfst        \
			$(top_builddir)/src/filters/remove-infl_deriv-borders.hfst       \
			$(top_builddir)/src/filters/remove-orthography-tags.hfst         \
			$(top_builddir)/src/filters/remove-orig_lang-tags.hfst           \
			$(top_builddir)/src/filters/remove-Orth_IPA-strings.hfst         \
			$(top_builddir)/src/filters/remove-word-boundary.hfst
	$(AM_V_RGX2FST)$(PRINTF) "\
		@\"$(top_builddir)/src/filters/remove-derivation-position-tags.hfst\" \
	.o. @\"$(top_builddir)/src/filters/remove-dialect-tags.hfst\"             \
	.o. @\"$(top_builddir)/src/filters/remove-homonymy-tags.hfst\"            \
	.o. @\"$(top_builddir)/src/filters/remove-variant-tags.hfst\"             \
	.o. @\"$(top_builddir)/src/filters/remove-norm-comp-tags.hfst\"           \
	.o. @\"$(top_builddir)/src/filters/remove-number-string-tags.hfst\"       \
	.o. @\"$(top_builddir)/src/filters/remove-usage-tags.hfst\"               \
	.o. @\"$(top_builddir)/src/filters/remove-orig_lang-tags.hfst\"           \
	.o. @\"$(top_builddir)/src/filters/remove-orthography-tags.hfst\"         \
	.o. @\"$(top_builddir)/src/filters/remove-Orth_IPA-strings.hfst\"         \
	.o. @\"$<\" \
	.o. @\"$(top_builddir)/src/filters/remove-word-boundary.hfst\"            \
	.o. @\"$(top_builddir)/src/filters/remove-hyphenation-marks.hfst\"        \
	.o. @\"$(top_builddir)/src/filters/remove-infl_deriv-borders.hfst\"       \
	;" \
		| $(HFST_REGEXP2FST) $(HFST_FLAGS) -S --harmonize-flags \
		> $@

# Target language specific filtering - build depends on the availability
# of the filter file.
# WITH filter file available (the source file is inverted with the .i modifier):
analyser-mt-gt-desc.%.tmp.hfst: analyser-mt-gt-desc.hfst \
			filters/remove-derivation-strings.%.hfst
	$(AM_V_RGX2FST)$(PRINTF) "\
		@\"filters/remove-derivation-strings.$*.hfst\" \
   	.o. @\"$<\".i \
    	;" \
		| $(HFST_REGEXP2FST) $(HFST_FLAGS) -S --harmonize-flags \
		-o $@

# With NO filter file available, invert the file to allow the general pattern
# *.tmp.hfst -> invert -> *.hfst
# to apply correctly:
analyser-mt-gt-desc.%.tmp.hfst: analyser-mt-gt-desc.hfst
	$(AM_V_INVERT)$(HFST_INVERT) $< \
		| $(HFST_FST2FST) $(HFST_FLAGS) -t -o $@

# Relabel GTDivvun tags to Apertium tags - generator:
generator-mt-apertium-norm.hfst: \
			generator-mt-gt-norm.hfst \
			$(top_builddir)/src/tagsets/apertium.relabel
	$(AM_V_HSUBST)$(HFST_SUBSTITUTE) $(HFSTFLAGS) -i $< \
		-F $(top_builddir)/src/tagsets/apertium.relabel \
		-o $@

# Relabel GTD tags to Apertium tags - analyser:
# % = TARGETLANG
# Step 1 - gt -> apertium.tmp
analyser-mt-apertium-desc.%.tmp.hfst: \
			analyser-mt-gt-desc.%.hfst \
			$(top_builddir)/src/tagsets/apertium.relabel
	$(AM_V_HSUBST)$(HFST_SUBSTITUTE) $(HFSTFLAGS) -i $< \
		-F $(top_builddir)/src/tagsets/apertium.relabel \
		| $(HFST_FST2FST) $(HFSTFLAGS) -t \
		-o $@

# Relabel GTD tags to Apertium tags - analyser:
# % = TARGETLANG
# Step 2a - apertium.tmp -> apertium
#         - BOTH target language specific reordering AND relabeling
analyser-mt-apertium-desc.%.hfst: analyser-mt-apertium-desc.%.tmp.hfst \
								  tagsets/reorder-tags.%.hfst \
								  $(srcdir)/tagsets/apertium.%.relabel
	$(AM_V_RGX2FST)$(PRINTF) "\
   		@\"$<\" \
	.o. @\"tagsets/reorder-tags.$*.hfst\" \
    	;" \
		| $(HFST_REGEXP2FST) $(HFST_FLAGS) -S --harmonize-flags \
		| $(HFST_SUBSTITUTE) $(HFSTFLAGS) \
		-F $(srcdir)/tagsets/apertium.$*.relabel \
		| $(HFST_FST2FST) $(HFSTFLAGS) -t \
		-o $@

# Relabel GTD tags to Apertium tags - analyser:
# % = TARGETLANG
# Step 2b - apertium.tmp -> apertium
#         - ONLY target language specific relabeling
analyser-mt-apertium-desc.%.hfst: analyser-mt-apertium-desc.%.tmp.hfst \
								  $(srcdir)/tagsets/apertium.%.relabel
	$(AM_V_HSUBST)$(HFST_SUBSTITUTE) $(HFSTFLAGS) -i $< \
		-F $(srcdir)/tagsets/apertium.$*.relabel \
		| $(HFST_FST2FST) $(HFSTFLAGS) -t \
		-o $@

# Relabel GTD tags to Apertium tags - analyser:
# % = TARGETLANG
# Step 2c - apertium.tmp -> apertium
#         - NO target language specific processing - just copy
analyser-mt-apertium-desc.%.hfst: analyser-mt-apertium-desc.%.tmp.hfst
	$(AM_V_CP)cp -f $< $@

%.att: %.hfst
	$(AM_V_FST2TXT)$(HFST_FST2FST) $(HFSTFLAGS) -w -i $< \
		| $(HFST_FST2TXT) -o $@

%.att.gz: %.att
	$(AM_V_GZIP)$(GZIP) -9 -c $< > $@

##### Disambiguation and syntactic parsing targets
# Copy files from the src dirs:
dependency-mt-gt.cg3: \
				$(GTCORE)/gtdshared/smi/src/syntax/dependency.cg3
	$(AM_V_CP)cp -f $< $@

functions-mt-gt.cg3: \
				$(GTCORE)/gtdshared/smi/src/syntax/functions.cg3
	$(AM_V_CP)cp -f $< $@

disambiguation-mt-gt.cg3: \
				$(top_srcdir)/src/syntax/disambiguation.cg3
	$(AM_V_CP)cp -f $< $@

# Change the tags from GTDivvun format to Apertium format:
%-apertium.cg3: %-gt.cg3
	$(AM_V_GEN)$(PYTHON) \
		$(GTCORE)/scripts/cg-tag-convertor-for-apertium.py < $< > $@

#### Copy to Apertium filenames
$(APERTIUM_MORPH_PAIRS_V): \
				analyser-mt-apertium-desc.%.att.gz
	$(AM_V_CP)cp -f $< $@

apertium-$(GTLANG).$(GTLANG).RL.att.gz: generator-mt-apertium-norm.att.gz
	$(AM_V_CP)cp -f $< $@

$(GTLANG).mor.rlx.bin: disambiguation-mt-apertium.bin
	$(AM_V_CP)cp -f $< $@

$(GTLANG).syn.rlx.bin: functions-mt-apertium.bin
	$(AM_V_CP)cp -f $< $@

#### HFST transducer fallback target:
#### - inversion is needed FOR THE ANALYSER because the hfst model is upside
#### down compared to Xerox AT APPLICATION TIME. The other command makes the
#### final transducer ready for use.
analyser%.hfst: analyser%.tmp.hfst
	$(AM_V_INVERT)$(HFST_INVERT) $< \
		| $(HFST_FST2FST) $(HFST_FLAGS) -t -o $@

generator%.hfst: generator%.tmp.hfst
	$(AM_V_FST2FST)$(HFST_FST2FST) $(HFST_FLAGS) -t -i $< -o $@

#### Xerox transducer fallback target:
%.xfst: %.tmp.xfst
	$(AM_V_CP)cp -f $< $@

include $(top_srcdir)/am-shared/vislcg3-include.am
include $(top_srcdir)/am-shared/silent_build-include.am
