## Process this file with automake to produce Makefile.in

## Copyright (C) 2011 Samediggi

## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Hfst fst variables:
GT_SPELLER_SRC_HFST=generator-speller-gt-norm.hfst
GT_COMMON_SPELLER_HFST=

####### Automake targets: ########

if WANT_SPELLERS
if CAN_HFST
GT_COMMON_SPELLER_HFST+=generator-fstspeller-gt-norm.hfst
GT_COMMON_SPELLER_HFST+=analyser-fstspeller-gt-norm.hfst
endif # CAN_HFST
endif # WANT_SPELLERS

noinst_DATA=$(GT_COMMON_SPELLER_HFST) $(GT_COMMON_SPELLER_XFST)

#### 1. Build the speller transducer with compound filtering:
generator-fstspeller-gt-norm-comp_restricted.hfst: ../$(GT_SPELLER_SRC_HFST) \
			$(top_builddir)/src/filters/remove-hyphenation-marks.hfst    \
			$(top_builddir)/src/filters/remove-infl_deriv-borders.hfst   \
			$(top_builddir)/src/filters/convert_to_flags-CmpNP-tags.hfst \
			$(top_builddir)/src/filters/split-CmpNP-tags.hfst
	$(AM_V_HXFST)$(PRINTF) "read regex                                        \
			@\"$(top_builddir)/src/filters/convert_to_flags-CmpNP-tags.hfst\" \
		.o. @\"$(top_builddir)/src/filters/split-CmpNP-tags.hfst\"            \
		.o. @\"$<\"                                                           \
		.o. @\"$(top_builddir)/src/filters/remove-hyphenation-marks.hfst\"    \
		.o. @\"$(top_builddir)/src/filters/remove-infl_deriv-borders.hfst\"   \
		; \n\
		 twosided flag-diacritics\n\
		 save stack $@\n\
		 quit\n" | $(HFST_XFST) -p $(VERBOSITY)

#### 2. Add corpus-based weights + add huge weight to nosugg-tagged strings:
%-weighted.hfst: %-comp_restricted.hfst  \
				 $(SURFWEIGHTS)          \
				 $(srcdir)/weighting/$(TAGWEIGHTS) \
				 $(srcdir)/weighting/word-boundary.relabel \
				unitweighted.hfst
	$(AM_V_GEN)$(HFST_COMPOSE) $(HFST_FLAGS) --xerox-composition=ON \
			$< $(SURFWEIGHTS) \
		| $(HFST_DISJUNCT) $(HFST_FLAGS) - unitweighted.hfst \
		| $(HFST_SUBSTITUTE) $(HFST_FLAGS) \
			-F $(srcdir)/weighting/word-boundary.relabel \
		| $(HFST_REWEIGHT) -a 50000.0 -S +Use/SpellNoSugg \
		| $(HFST_REMOVE_EPSILONS)     $(HFST_FLAGS) \
		| $(HFST_PUSH_WEIGHTS) -p end $(HFST_FLAGS) \
		| $(HFST_DETERMINIZE)  -E     $(HFST_FLAGS) \
		| $(HFST_MINIMIZE)     -E     $(HFST_FLAGS) \
		-o $@

# There is a bug in hfst-reweight blocking us from using a TSV reweight file.
# When it is fixed, add the following to the block above, between compose and
# disjunct (ie as the second command):
# $(HFST_REWEIGHT) $(HFST_FLAGS) -T $(srcdir)/weighting/$(TAGWEIGHTS)

# Assumptions:
# 1. There is always a tags.reweight file (at least a toy one)
# 2. There is always a corpus for weighting (at least a toy one)

# Copy the weighted fst to the tmp fst:
# (replace with further processing in the future, if needed)
%.tmp.hfst: %-weighted.hfst
	$(AM_V_CP)cp -f $< $@

# Copy the tmp transducer to the final one. This allows local overrides.
%.hfst: %.tmp.hfst
	$(AM_V_CP)cp -f $< $@

# Invert the basic fst, to enable symmetric yaml tests:
analyser-%.hfst: generator-%.hfst
	$(AM_V_INVERT)$(HFST_INVERT) $(VERBOSITY) $(HFST_FLAGS) -i $< -o $@

####### Other targets: ###########
clean-local:
	-rm -f *.hfst

include $(top_srcdir)/am-shared/tools-spellcheckers-fstbased_weights-dir-include.am
include $(top_srcdir)/am-shared/silent_build-include.am
