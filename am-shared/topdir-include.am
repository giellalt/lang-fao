## Include this file in top-level srcdir to compile FSTs

# *.gt.* designates the tagset being used.
# At the end of the makefile, there is support for automatic compilation of
# other tagsets, given that the proper tagset relabeling files are defined,
# and that the target files are defined as part of the 'all' target.

####### Automake targets: ########

if WANT_HFST
GT_MORPHOLOGY_HFST=analyser.gt.hfst
GT_GENERATION_HFST=generator.gt.hfst
GT_DICTIONARY_HFST=dictionary.default.hfst
endif

if WANT_XFST
GT_MORPHOLOGY_XFST=analyser.gt.xfst
GT_GENERATION_XFST=generator.gt.xfst
GT_DICTIONARY_XFST=dictionary.default.xfst
endif

if WANT_HFST
hfstdatadir=$(datadir)/hfst/$(GTLANG)
hfstdata_DATA=$(GT_MORPHOLOGY_HFST) $(GT_DICTIONARY_HFST) \
			  $(GT_HYPHENATION_HFST) $(GT_GENERATION_HFST)
endif

noinst_DATA=$(GT_MORPHOLOGY_XFST) $(GT_DICTIONARY_XFST) \
			$(GT_HYPHENATION_XFST) $(GT_GENERATION_XFST)

####### HFST build rules: ########

# The "raw" transducer contains all tags and symbols available on the analysis
# side. Some of them are optional for generation, some are only needed for
# special tools. Each final transducer needs to apply it's own filtering to get
# exactly what is required.
raw.gt.hfst: morphology/$(GTLANG).lexc.hfst \
					 phonology/$(GTLANG)-phon.hfst
	$(HFST_COMPOSE_INTERSECT) $(HFST_FLAGS) -1 morphology/$(GTLANG).lexc.hfst \
		-2 phonology/$(GTLANG)-phon.hfst |\
		$(HFST_INVERT) $(HFST_FLAGS) |\
		$(HFST_MINIMIZE) $(HFST_FLAGS) -o $@

analyser.gt.hfst: raw.gt.hfst orthography/inituppercase.hfst
	$(HFST_COMPOSE_INTERSECT) $(HFST_FLAGS) -1 $< \
		-2 orthography/inituppercase.hfst |\
		$(HFST_PREPROCESS_FOR_OPTIMIZED_LOOKUP_FORMAT) $(HFST_FLAGS) $< |\
		$(HFST_FST2FST) $(HFST_FLAGS) -f olw -o $@

generator.gt.hfst: raw.gt.hfst
	$(HFST_INVERT) $(HFST_FLAGS) -i $< |\
		$(HFST_MINIMIZE) $(HFST_FLAGS) |\
		$(HFST_FST2FST) $(HFST_FLAGS) -f olw -o $@

dictionary.default.hfst: raw.gt.hfst
	$(HFST_PROJECT) $(HFST_FLAGS) --project=upper -i $< |\
		$(HFST_MINIMIZE) $(HFST_FLAGS) |\
		$(HFST_FST2FST) $(HFST_FLAGS) -f olw -o $@

# create generic tagset variants of analyzers
analyser.%.hfst: analyser.gt.hfst tagsets/%.relabel
	$(HFST_SUBSTITUTE) $(HFSTFLAGS) -F $(srcdir)/tagsets/$*.relabel -i $< -o $@

# remove sub-standard forms to get a normative transducer
analyser.norm.hfst: analyser.gt.hfst filters/remove-sub-forms.hfst
	$(HFSTCOMPOSE) $(HFSTFLAGS) -1 filters/remove-sub-forms.hfst -2 $< -o $@

# create tagset variants of generators
generation.%.hfst: generation.omor.hfst tagsets/%.relabel
	$(HFST_SUBSTITUTE) $(HFSTFLAGS) -F $(srcdir)/tagsets/$*.relabel -i $< -o $@

# lemmatization is a special case of tagset variant
lemmatize.default.hfst: analyser.gt.hfst tagsets/lemmatize.relabel
	$(HFST_SUBSTITUTE) $(HFSTFLAGS) -F $(srcdir)/tagsets/lemmatize.relabel -i $< -o $@

# optimizing
.hfst.hfstol:
	$(HFST_PREP) $(HFST_FLAGS) -i $< |\
		$(HFST_FST2FST) $(HOPT_FLAGS) -f olw -o $@

# HFST transducer compilation ends.

####### Xerox build rules: #######

# The "raw" transducer contains all tags and symbols available on the analysis
# side. Some of them are optional for generation, some are only needed for
# special tools. Each final transducer needs to apply it's own filtering to get
# exactly what is required.
raw.gt.xfst: morphology/$(GTLANG).lexc.xfst \
					phonology/$(GTLANG)-phon.xfst
	$(PRINTF) \
		"read-source morphology/$(GTLANG).lexc.xfst\n\
		 read-rules phonology/$(GTLANG)-phon.xfst\n\
		 compose-result\nsave-result $@\nquit\n" | $(LEXC)

analyser.gt.xfst: raw.gt.xfst orthography/inituppercase.xfst
	$(PRINTF) "read regex @\"$<\" .o. @\"orthography/inituppercase.xfst\" ;\n\
	save stack $@\nquit\n" | $(XFST)

# This is the standard generating transducer. It 
generator.gt.xfst: raw.gt.xfst
	$(PRINTF) "load stack $<\ninvert net\nsave stack $@\nquit\n" | $(XFST)

dictionary.default.xfst: raw.gt.xfst
	$(PRINTF) "load stack $<\nlower net\nsave stack $@\nquit\n" | $(XFST)
# Xerox transducer compilation ends.

####### Other targets: ###########
# cleaning
clean-local:
	-rm -f *.hfst *.hfstol *.zhfst *.xfst voikko-fi_FI.pro index.xml

# vim: set ft=automake:
