#Distributed under the terms of the GNU General Public License version 2
# or any later version.

# ==================================================================== #
#!!    S Y N T A C T I C   F U N C T I O N S   F O R   S Á M I
# ==================================================================== #
# ====================================================================

#!!  Sámi language technology project 2003-2014, University of Tromsø #

#!! This file adds syntactic functions. It is common for all the Saami
##! languages, so far for sma, sme, smj.

# ========== #
# Delimiters #
# ========== #

DELIMITERS = "<.>" "<!>" "<?>" "<...>" "<¶>" sent ;

#PARENTHESES = "<$(>" "<$)>" "<$[>" "<$]>" "<${>" "<$}>" "<$«>" "<$»>" ;

# ============= #
# Tags and sets #
# ============= #

SETS

# I define end of clause and beginning of clause in a way so that the file
# may be read both by the CG-2 and the vislcg formalisms.

LIST BOS = (>>>) (<s>);
LIST EOS = (<<<) (</s>);

# CG3 doesn´t function without >>> and <<< !

# Tags declared as single-membered LISTs
# ======================================

# Parts of speech
# ---------------


LIST BOS = (>>>) (<s>); 
LIST EOS = (<<<) (</s>); # vislcg and CG-2 together.

LIST N = N ;
LIST V = V ;
LIST A = A ;
LIST A* = A* ;
LIST Prop = Prop ;
LIST Adv = Adv ;
LIST Num = Num ;
LIST CC = CC ;
LIST CS = CS ;
LIST Interj = Interj ;
LIST Abbr = Abbr ;
LIST ACR = ACR ;
LIST Pr = Pr ;
LIST Pron = Pron ;
LIST Pers = Pers ;
LIST Det = Det ;
LIST Dem = Dem ;
LIST Refl = Refl ;
LIST Recipr = Recipr ;
LIST Poss = Poss ;
LIST Interr = Interr ;
LIST IM = IM ;
LIST ABBR = ABBR ;
LIST Attr = Attr ;
LIST Ord = Ord ;

LIST Nom = Nom ;
LIST Acc = Acc ;
LIST Gen = Gen ;
LIST Dat = Dat ;
LIST Msc = Msc ;
LIST Fem = Fem ;
LIST Neu = Neu ;
LIST Sg = Sg ;
LIST Pl = Pl ;
LIST Def = Def ;
LIST Indef = Indef ;
LIST Cmp = Cmp ;
LIST Superl = Superl ;
LIST Prs = Prs ;
LIST Prt = Prt ;
LIST 1Sg = 1Sg ;
LIST 2Sg = 2Sg ;
LIST 3Sg = 3Sg ;
LIST Inf = Inf ;
LIST PrfPrc = PrfPrc ;
LIST PrsPrc = PrsPrc ;
LIST Ind = Ind ;
LIST Imp = Imp ;
LIST Sbj = Sbj ;
LIST Pass = Pass ;
LIST Sup = Sup ;
LIST Cmpnd = Cmpnd ;
LIST CLB = CLB ;
LIST PUNCT = PUNCT ;
LIST LEFT = LEFT ;
LIST RIGHT = RIGHT ;
LIST Guess = Guess ;
LIST Arab = Arab ;

LIST Sem/Fem = Sem/Fem ;
LIST Sem/Mal = Sem/Mal ;
LIST Sem/Plc = Sem/Plc ;
LIST Sem/Sur = Sem/Sur ;
LIST Sem/Org = Sem/Org ;
LIST Sem/Veh = Sem/Veh ;
LIST Sem/Adr = Sem/Adr ;


LIST HUMAN = Sem/Hum Sem/Mal (ant m) Sem/Fem  (ant f) Sem/Sur cog Pers ;

LIST TAG = N V A Adv CC CS Interj Pr Pron Pers Det Refl Recipr Poss Nom Acc Gen
Dat Msc Fem Neu Sg Pl Def Indef Cmp Sup Prs Prt 1Sg 2Sg 3Sg Inf PrfPrc
PrsPrc Sup Imp CLB PUNCT LEFT RIGHT Sem/Fem Sem/Mal Sem/Plc Sem/Sur Sem/Org Sem/Veh Guess ;


LIST NAGD = Nom Acc Gen Dat ;
LIST AGD = Acc Gen Dat ;
LIST GENDER = Msc Fem Neu ;
LIST NUMBER = Sg Pl ;
SET NAGDNUMBERGENDER = (Msc Sg Nom) OR (Msc Sg Acc) OR (Msc Sg Gen) OR (Msc Sg Dat) OR (Msc Pl Nom) OR (Msc Pl Acc) OR (Msc Pl Gen) OR (Msc Pl Dat) OR (Fem Sg Nom) OR (Fem Sg Acc) OR (Fem Sg Gen) OR (Fem Sg Dat) OR (Fem Pl Nom) OR (Fem Pl Acc) OR (Fem Pl Gen) OR (Fem Pl Dat) OR (Neu Sg Nom) OR (Neu Sg Acc) OR (Neu Sg Gen) OR (Neu Sg Dat) OR (Neu Pl Nom) OR (Neu Pl Acc) OR (Neu Pl Gen) OR (Neu Pl Dat) ;


# Sets
# ====

SET WORD = N | V | A | Pr | Pron | Det | Adv | CC | CS | Interj | Num | ("\?") ;


# Noun sets


SET NounMscFem = (N Msc) OR (N Fem) ;
SET NounMscNeu = (N Msc) OR (N Neu) ;
SET NounFemNeu = (N Fem) OR (N Neu) ;

SET MscFem = Msc OR Fem ;
SET MscNeu = Msc OR Neu ;
SET FemNeu = Fem OR Neu ;

LIST 3PERS = "hann" "hon" "tað" ;

# Adjective sets

SET REALADJ = A OR A* ;


# Nominal sets

LIST NOMINALHEAD = N Prop Num Pers Refl Recipr (Pron Interr) (Pron Indef) ;

LIST NorA = N A ;

LIST PRENAGR = Det A ;

LIST MIDJA = "miðja" ; # in the middle of - construction. More N in here, also bottle constr.

SET NOT-ACC = TAG - Acc ;

SET CARDINALS = Num - Ord ;

# Verb sets

LIST COPULAS = "vera" "verða" ;

LIST HAVA = "hava" ;

LIST MODV = "kunna" "láta" "skula" "vilja" "munna" "mega" ;


LIST AUX-OR-MAIN = HAVA ; # perhaps remove this set
SET AUX = COPULAS OR HAVA OR MODV ;
SET MAIN-V = V - COPULAS ;

SET NOT-VERB = WORD - V ;


LIST VFIN = Prs Prt Imp Sbj ;
SET VFIN-NOT-AUX = VFIN - AUX ;

LIST INDSBJ = Ind Sbj ;
#LIST Ind = Prs Prt ;

LIST NONTHIRDV = 1Sg 2Sg 1Pl Pl ;

LIST VINFIN = Inf Sup PrfPrs PrsPrc ;
SET NOT-REAL-V = PrsPrc ;
SET REAL-V = V - NOT-REAL-V ;



LIST DATV = "bjóða" "hýsa" "sleppa" "smakka" "takka" ; # "undirvísa" 
 # sleppa3 = sleppa manninum leysum
 
LIST DATPREPV = "liggja" "vera" "standa" "fiska" "vera"; # use only ACCPREPV
LIST ACCPREPV = "leggja" "fara" "renda" "koma" "liða" "seta" ;

LIST OBJPREDVERB = "kalla" "doypa" "nevna" "taka"  ;

LIST MOVEMENTVERB = "koma" "koyra" ;

SET TV = V - COPULAS - MODV ;

# Noun-Verb sets


LIST THIRD = Sg 3Sg Pl  ;

# Number sets

SET NUMBERS = Num - ("eitt") - ("1") ;

# Preposition sets

LIST ACCPREP = "aftan" "aftanvert" "ábeint" "áraka" "foruttan" "gjøgnum" "hóast" "inntil" "ígjøgnum" "íkring" "kring" "niðan" "oman" "síðan" "umframt" "umhvørvis" "umkring" "báðumegin" "hasumegin" "hvørgumegin" "høgrumegin" "sínumegin" "skeivumegin" "somumegin" "vinstrumegin" "øðrumegin" "eystan" "norðan" "sunnan" "sum" "vestan" ;

LIST DATPREP = "hjá" "með" "aftrat" "afturat" "afturímóti" "andstøðis" "andsýnis" "frá" "mótvegis" "nær" "sambært" "viðvíkjandi" "úr" ; # úr?

LIST ACCDATPREP = "í" "á" "undir" "yvir" "eftir" "fyri" "við" ;

LIST ACCGENPREP = "innan" "uttan" "millum" "til" "vegna" ;

LIST ACCDATGENPREP = "at" "av" "hjá" "móti" "um" "undan" "úr" ;


SET SOMEACCPREP = ACCPREP | ACCDATPREP | ACCGENPREP | ACCDATGENPREP ;

SET SOMEDATPREP = DATPREP | ACCDATPREP | ACCDATGENPREP ;

SET SOMEGENPREP = ACCGENPREP | ACCDATGENPREP ;

SET SOMEACCDATPREP = ACCDATPREP | ACCDATGENPREP ;

# Boundary sets

SET S-BOUNDARY = CS | Interr | (";") | (":") | BOS | EOS ;
SET S-BOUNDARY2 = CS | Interr | (";") | (":") | BOS | EOS  ;

# Complementary set



# Case sets

# Some case, but not...
SET NOTNOM = Dat | Gen | Acc ;
SET NOTDAT = Nom | Gen | Acc ;
SET NOTACC = Nom | Gen | Dat ;
SET NOTACCDAT = Nom | Gen ;
SET OBL = Acc | Dat | Gen ;

# Anything but the following case...
SET NOACC = WORD - Acc ;
SET NODAT = WORD - Dat ;
SET NOACCDAT = WORD - Acc - Dat ;


#SET NO

SET PRE-N =  A | Det | (N Gen) | Num | (Pron Gen) | CC ; # Det???


LIST COMMA = (",") ;
SET MARK =  COMMA | ("\\") | ("\;") ; #"

LIST PUNCT-LEFT = (PUNCT LEFT) ;
LIST PUNCT-RIGHT = (PUNCT RIGHT) ;
SET PRE-APP   = COMMA OR PUNCT-LEFT ;


SET WORDMARK = WORD | MARK ;

SET NPNH = WORDMARK - PRE-N ;
SET NPNHA = WORDMARK - PRE-N - Adv ;
SET NOT-ADV = WORDMARK - Adv - CC ; # adding CC
SET NOT-PROP = WORDMARK - Prop - CC ;
SET LEX-ADV = Adv - (A*) ;
SET NOT-A = WORDMARK - A ;
SET NOT-CC = WORDMARK - CC ;
SET NOUNADJ = N | A ;

SET NP-MEMBER = PRE-N | N | Pron ;

LIST TIME = "sunnudagur" ;





#!! !!Syntactic tags
# --------------

LIST @+FAUXV = @+FAUXV ;  	#!! * @+FAUXV : finite auxiliary verb 
		 					#!! ** ferte: Son ferte oaidnit ollislaš gova. - She must see the whole picture.
LIST @+FMAINV = @+FMAINV ;	#!! * @+FMAINV : finite main verb
							#!! ** oaidná: Son oaidná ollislaš gova. - She sees the whole picture	
LIST @-FAUXV = @-FAUXV ;	#!! * @-FAUXV : infinite auxiliary verb
							#!! ** sáhte: In sáhte gáhku borrat. - I cannot eat cake.	
LIST @-FMAINV = @-FMAINV ;	#!! * @-FMAINV : infinite main verb
							#!! ** oaidnit: Son ferte oaidnit ollislaš gova. - She must see the whole picture.
LIST @-FSUBJ> = @-FSUBJ> ;	#!! * @-FSUBJ> : Subject of infinite verb outside the verbal.
							#!! ** mu: Diet dáhpáhuvai mu dieđikeahttá. - It happened without me knowing about it.
LIST @-F<OBJ = @-F<OBJ ;	#!! * @-F<OBJ : Subject of infinite verb outside the verbal.
							#!! ** nuppi: Ulbmil lea oažžut nuppi boagustit. - The goal is to get the other one to laugh.
LIST @-FOBJ> = @-FOBJ> ;	#!! * @-FOBJ> : Object of infinite verb outside the verbal.
							#!! ** váldovuoittuid: Sii vurde váldovuoittuid fasket. - They waited to grab the main prizes.
LIST @SPRED<OBJ = @SPRED<OBJ ;	#!! * @SPRED<OBJ : Object of an subsject predicative. (some adjectives are transitive)
							  	#!! ** guliid: Mánát leat oažžulat guliid.
LIST @-FADVL = @-FADVL ; 	#!! * @-FADVL : Adverbial complement of infinite verb outside the verbal.
							#!! ** várrogasat: Dihkkadeaddji rávve skohtervuddjiid várrogasat mátkkoštit. - The roadman warns snowscooter drivers to drive carefully.
LIST @>ADVL = @>ADVL ; 	#!! * @>ADVL : Modifier of an adverbial to the right.
						#!! ** vaikko: doppe leat vaikko man ollu studeanttat.
LIST @ADVL< = @ADVL< ; 	#!! * @ADVL< : Komplement for adverbial.
						#!! ** vahkus: Son málesta guktii vahkus.
LIST @<ADVL = @<ADVL ;	#!! * @<ADVL : Adverbial after the main verb.
						#!! ** dás: Eanet dieđuid gávnnat dás.
LIST @ADVL> = @ADVL> ;	#!! * @ADVL> : Adverbial to the left of the main verb
						#!! ** viimmat: Dál de viimmat asttan lohkat reivve.
LIST @ADVL>CS = @ADVL>CS ;	#!! * @ADVL>CS : Adverbial modifying subjunction.
							#!! ** 'beare' pointing at 'danin go': Muhto dus ii leat riekti dearpat su beare danin go sáhtát.
LIST <hab> = <hab> ;	#!! * <hab> : Habitive, specifying an adverbial, e.g. @ADVL> <hab>
						#!! ** Máhtes: Máhtes lea beana.
LIST <ext> = <ext> ;	#!! * <ext> : Extencial, specifying an subject, e.g. @<SUBJ <ext>
						#!! ** beana: Máhtes lea beana.
LIST <logo> = <logo> ;	#!! * <logo> : logoforic pronouns, e.g. @>N <logo> (for MT)
LIST <cs> = <cs> ;	#!! * <cs> : 
LIST @>N = @>N ;      	#!! * @>N : Modifier of a noun to the right.
						#!! ** geavatlaš: Ráđđehussii lea geavatlaš politihkka deaŧalaš. - For the government, practical politics is important.
LIST @N< = @N< ;		#!! * @N< : Complement of noun to the left.
						#!! ** vihtta: Mun boađán diibmu vihtta.
LIST @>A = @>A ;		#!! * @>A : Modifier of an adjective to the right.
						#!! ** juohke: Seminára lágiduvvo juohke nuppi jagi.
LIST @P< = @P< ;		#!! * @P< : Complement of preposition.
						#!! ** soađi: Dat dáhpáhuvai maŋŋel soađi.
LIST @>P = @>P ;		#!! * @>P : Complement of postposition.
						#!! ** riegádeami: Seta riegádeami maŋŋel Áttán elii vel 800 jagi.
LIST @HNOUN = @HNOUN ;	#!! * @HNOUN : Stray noun in sentence fragment.
						#!! ** muittut: Fidnokurssa muittut.
LIST @INTERJ = @INTERJ ;	#!! * @INTERJ : Interjection.
							#!! ** Hei: Hei, boađe!
LIST @>Num = @>Num ;		#!! * @>Num : Attribute of numeral to the right.
						#!! ** dušše: Mun ledjen dušše guokte mánu doppe.
LIST @Pron< = @Pron< ;	#!! * @Pron< : Complement of pronoun to the left.
						#!! ** Birehiin: Moai Birehiin leimme doppe.
LIST @>Pron = @>Pron ;	#!! * @>Pron : Modifyer of pronoun to the right.
						#!! ** vaikko: Olmmoš sáhttá bargat vaikko maid.
LIST @Num< = @Num< ;	#!! * @Num< : Complement of numeral to the left.
						#!! ** girjjiin: Dat lea okta min buoremus girjjiin.
LIST @OBJ = @OBJ ;		#!! * @OBJ : Object, the verb is not in the sentence (ellipse)
LIST @<OBJ = @<OBJ ;	#!! * @<OBJ : Object, the verb is to the left.
						#!! ** gávtti: Son goarru gávtti.
LIST @OBJ> = @OBJ> ;	#!! * @OBJ> : Object, the verb is to the right.
						#!! ** filmma: Dán filmma leat Kárášjoga nuorat oaidnán.
LIST @OPRED = @OPRED ;	#!! * @OPRED : Object predicative, the verb is not in the sentence (ellipse).
LIST @<OPRED = @<OPRED ;	#!! * @<OPRED : Object predicative, the verb is to the left.
							#!! ** buriid: Son ráhkada gáhkuid hui buriid.
LIST @OPRED> = @OPRED> ;	#!! * @OPRED> : Object predicative, the verb is to the right.
							#!! ** dohkkemeahttumin: Son oinnii dohkkemeahttumin bargat ášši nu.
LIST @PCLE = @PCLE ;		#!! * @PCLE : Particle.
							#!! ** Amma: Amma mii eat leat máksán? - We have not paid, have we?
LIST @COMP-CS< = @COMP-CS< ;	#!! * @COMP-CS< : Complement of subjunction.
								#!! ** vejolaš: Dat šaddá nu buorre go vejolaš.
LIST @SPRED = @SPRED ;		#!! * @SPRED : Subject predicative, the verb is not in the sentence (ellipse).
LIST @<SPRED = @<SPRED ;		#!! * @<SPRED : Subject predicative, the verb is to the left.
							#!! ** árgabivttas: Ovdal lei gákti árgabivttas.
LIST @SPRED> = @SPRED> ;		#!! * @SPRED> : Subject predicative, the verb is to the left.
							#!! ** álbmogin: Sápmelaččaid historjá álbmogin lea duháhiid jagiid boaris.
LIST @SUBJ = @SUBJ ;		#!! * @SUBJ : Subject, the finite verb is not in the sentence (ellipse).
LIST @<SUBJ = @<SUBJ ;		#!! * @<SUBJ : Subject, the finite verb is to the left.
							#!! ** gákti: Ovdal lei gákti árgabivttas.
LIST @SUBJ> = @SUBJ> ;		#!! * @SUBJ> : Subject, the finite verb is to the right.
							#!! ** Son: Son lea mu oabbá. - Sheis my sister.
LIST @PPRED = @PPRED ;		#!! * @PPRED : Predicative for predicative.
LIST @APP = @APP ;			#!! * @APP : Apposition
LIST @APP-N< = @APP-N< ;	#!! * @APP-N< : Apposition to noun to the left.
							#!! ** oahpaheaddji: Oidnen Ánne, min oahpaheaddji.
LIST @APP-Pron< = @APP-Pron< ;	#!! * @APP-Pron< : Apposition to pronoun to the left.
								#!! ** boazodoalloáirasat: Ja moai boazodoalloáirasat áigguime vaikko guovttá joatkit barggu.
LIST @APP>Pron = @APP>Pron ;	#!! * @APP>Pron : Apposition to noun to the right.
LIST @APP-Num< = @APP-Num< ;	#!! * @APP-Num< : Apposition to numeral to the left.
LIST @APP-ADVL< = @APP-ADVL< ;	#!! * @APP-ADVL< : Apposition to adverbial to the left.
								#!! ** bearjadaga: Mun vuolggán ihttin, bearjadaga.
LIST @VOC = @VOC ;	#!! * @VOC : Vocative
					#!! ** Miss Turner : Bures boahtin deike, Miss Turner! - Welcome her, Miss Turner!
LIST @CVP = @CVP ;	#!! * @CVP : Conjunction or subjunction that conjoins finite verb phrases.
					#!! ** go : Leago guhkes áigi dassá go Máreha oidnet? - Is it a long time since you saw Máret?
LIST @CNP = @CNP ;	#!! * @CNP : Local conjunction or subjunction.
					#!! ** vai : Leago nieida vai bárdni? - Is it a girl or a boy?
LIST @CMPND = @CMPND ;	#!! * @CMPND
LIST @X = @X ;		#!! * @X : The function is unknown, e.g. because of that the word is unknown

LIST @ADVL = @ADVL @ADVL> @ADVL< @<ADVL @>ADVL @-F<ADVL ;
SET SUBJ = @<SUBJ OR @SUBJ> OR @SUBJ ;
SET SPRED = @<SPRED OR @SPRED> OR @SPRED ;
SET OPRED = @<OPRED OR @OPRED> OR @OPRED ;
SET FOBJ = @-F<OBJ OR @-FOBJ> ;
SET FMAINV = @-FMAINV OR @+FMAINV OR (V @<OBJ) OR (V @N<) OR (V @A<) OR (V @<SUBJ) OR (V @<ADVL) ;
SET FAUXV = @-FAUXV OR @+FAUXV ;


SET OBJ = (@<OBJ) OR (@OBJ>) OR (@OBJ) OR (@-F<OBJ) OR (@-FOBJ>) ;
LIST <OBJ = @-F<OBJ @<OBJ ;
LIST OBJ> = @OBJ> @-FOBJ> ;

SET <OBJ-OTHERS = <OBJ OR (Gen) OR (Nom) OR (Adv) ;
SET OBJ>-OTHERS = OBJ> OR (Gen) OR (Nom) OR (Adv) ;

SET SYN-V = V + SUBJ OR OBJ + V OR @ADVL + V OR (V @N<) OR (V @A<) OR V + SPRED OR (V @COMP-CS<) ;


LIST OKTA = "akta" "okta";
LIST go = "go" ;


# Initials
# --------

LIST INITIAL = "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m"
        "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"
        "á" "æ" "ø" "å" "ö" "ä" ;

LIST CAP-INITIAL = "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M"
        "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z"
        "Á" "Æ" "Ø" "Å" "Ö" "Ä" ;

#!! !!Tag sets
# ========
  SETS
# ========


# Word or not
# -----------

SET REALWORD = WORD - Num ;

SET REALWORD-NOTABBR = WORD - Num - ABBR ;

SET WORD-NOTDE = WORD - ("de") ;


# Finiteness and mood
# - - - - - - - - - -

SET V-IND-FIN = Prs OR Prt ;
 # Problem: "In boahtán" is an invisible indicative

SET V-MOOD = Ind OR Imp ;

SET VFIN-POS = V-MOOD ;

SET VFIN-NOT-IMP = VFIN - Imp ;

SET VFIN-NOT-NEG = VFIN ;
  # this might be to strict, besides, "iige" can be written "ii ge"

SET NOT-PRFPRC = WORD - PrfPrc ;

# Person
# - - - -

LIST V-SG1 = (V 1Sg)  ;
LIST V-SG2 = (V 2Sg) ;
LIST V-SG3 = (V 3Sg) ;
LIST V-PL = (V Pl) ;



 # Note that imperative verbs are not included in these sets!

# Some subsets of the VFIN sets
# - - - - - - - - - - - - - - -
SET V-SG = V-SG1 OR V-SG2 OR V-SG3 ;

SET V-NOT-SG1 = VFIN-NOT-IMP - V-SG1 ;
SET V-NOT-SG2 = VFIN-NOT-IMP - V-SG2 ;
SET V-NOT-SG3 = VFIN-NOT-IMP - V-SG3 ;


SET V-1-2 = V-SG1 OR V-SG2 OR V-PL ;
SET V-3  = V-SG3 OR V-PL ;

# Sets consisting of LEAT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

LIST VPRFPRC = (V PrfPrc) ;


# Pronoun sets
# ------------

LIST MUN = (Pron Pers 1Sg Nom);
LIST DON = (Pron Pers 2Sg Nom);
LIST SON = ("son" Pron Pers 3Sg Nom);



LIST PPRON-GEN = (Pron Gen);

SET PPRON-NOT-GEN = (Pron Pers) - PPRON-GEN ;

LIST DEM-SG = (Pron Dem Sg Nom);
LIST DEM-PL = (Pron Dem Pl Nom);
SET NOT-DEM = WORD - Dem ;

LIST SGPRON = (Pron 1Sg) (Pron 2Sg) (Pron 3Sg) (Pron Sg) ;
LIST PLPRON = (Pron Pl) ;

SET PRON-NOT-SG = PLPRON ;

# This set is for choosing between Adv and Pron Indef.

# Adjectival sets and their complements
# -------------------------------------

SET NOT-A-COMMA = WORD - A - COMMA ;
SET NOT-A-PCLE = WORD - A ;

SET NOT-A-ADV = WORD - A - Adv OR ("maid") ;


 # and many others

# Adverbial sets and their complements
# ------------------------------------
SET LEX-ADV = Adv - (A*) ;

SET NOT-ADV-DE            = WORD - Adv ;
SET NOT-ADV-N          = NOT-ADV - N;
SET NOT-ADV-PCLE       = NOT-ADV ;
SET NOT-ADV-INDEF      = NOT-ADV - Indef ;
SET NOT-ADV-PCLE-ILL   = WORD - Adv ;
SET NOT-ADV-PCLE-Refl  = WORD - Adv - Refl ;
SET NOT-ADV-PCLE-INDEF = WORD - Adv - Indef ;
SET NOT-ADV-PCLE-NEG   = WORD - Adv ;
SET NOT-ADVL-PCLE-NEG  = WORD - @ADVL - @P< ;

 # Introduce finite clauses.

LIST PLACE-ADV =  "davá#bealde" ;





# Coordinators
# ------------

LIST XGO = "dego" "dugo" "nugo" "seammaládjego" "seammaláhkaigo" ;
  # Compounds
LIST SEAMMAX = "seamma#ládje" "seamma#láhkai" "seamma#láhkái" ;
  # Those combine with go


SET CRD = @CNP OR COMMA OR XGO OR ("/") OR ("-") ;
    # AFTER LCRD vs. GCRD disambiguation


LIST ADV-AFTER-NUM = "geardde" ;


LIST CURRENCY = "denára" "dollár" "euro" "kruvdnu" "kr" "ru" "rubel" "ruvdno" "ruvdnu" "¢" "€" "$";




LIST HEADOFPARTS = "eanetlohku" "unnitlohku" "mearri" "nissonoassi" "oassi" "váldooassi" "bealli" "guhtemuš" "goappašat" "proseanta" "%" Sem/Part ;


# Sets of elements with common syntactic behaviour
# ================================================

SETS

#!! * Sets for verbs
# -----


 # The set REAL is smaller than COPULAS, made for verbs with PrfPrc complements: Seammás REAL-COPULAS son dovdan iežas...
LIST REAL-COPULAS = "dáidit" "leat" "soaitit" "veadjit" "liehket" "lea";


SET NOT-COP-V = V - COPULAS ;


# All active verbs with a TV tag, including AUX-OR-MAIN.

LIST V-TRANS = V  ; # must be removed, no TV in fao verb.lexc


SET TRANS-V = V-TRANS ;

#!! * NP sets defined according to their morphosyntactic features
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


LIST N-SG-NOM = (N Sg Nom);

SET HEAD-N = N ;

SET HEAD-N-NOM = (N Nom) ;

SET SUBJECTHEAD = N OR A OR Pron - Refl ; # These, can be subject heads

SET NP = N OR A ;                      # anything that can take except numerals
SET NP-HEAD        = Pron OR HEAD-N - ("buorre") ;
SET NP-HEAD-SG     = SGPRON OR (N Sg) OR (A Sg)  - Dem - ("buorre");
SET NP-HEAD-PL     = PLPRON OR (N Pl) OR (A Pl) - Dem - ("buorre");
SET NP-HEAD-SG-NOM = SGPRON + Nom OR (N Sg Nom) OR (A Sg Nom) - ("buorre") ;
SET NP-HEAD-PL-NOM = PLPRON + Nom OR (N Pl Nom) OR (A Pl Nom)  - ("buorre");
SET NP-HEAD-NOM    = NP-HEAD-SG-NOM OR NP-HEAD-PL-NOM ;
SET NP-HEAD-ACC    = (Pron Acc) OR (N Acc) OR (A Acc) - (Dem Attr) - ("buorre");
SET NP-HEAD-GEN    = (Pron Gen) OR (N Gen) OR (A Gen) - (Dem Attr) - ("buorre")   ;

#!! * The PRE-NP-HEAD family of sets

#!! These sets model noun phrases (NPs). The idea is to first define whatever can
#!! occur in front of the head of the NP, and thereafter negate that with the
#!! expression __WORD - premodifiers__.


SET PRE-NP-HEAD = (Prop Attr) OR (Prop @>N) OR (A Attr) OR (ABBR Attr) OR ("buorre")
         OR (Pron Pers Gen) OR (N Gen) OR (A Gen) OR ("buot") OR
         Num OR CC OR (Pron Dem) OR Pron + Refl + Gen OR (Indef Attr) OR
         (PrfPrc @>N) OR PrsPrc OR (A Ord) OR (Num @>N) OR (A @>N) OR @>N OR @>A OR @>Pron OR @Num< OR (CC @CNP) OR (@>CC) OR (Action Gen) OR (@Pron<) ;
         # The strict version of items that can only be premodifiers, not parts of the predicate

#LIST PRE-NP-HEAD = @>N @>A @>Pron @Num< @CNP ;

SET PRE-NP-V = PrfPrc OR PrsPrc OR (V A) OR (Prs 3Sg) + Ind OR (Prs 1Sg) + Ind ;
    # to be used together with PRE-NP-HEAD before @>N is disambiguated


SET PRE-A-N     = (Pron Pers Gen) OR (Pron Pers Acc) OR (Pron Indef) OR Num OR (A Ord) OR (Pron Dem) OR Pron + Refl + Gen OR Pron + Refl + Acc ; # Acc pga av manglende disambiguering tidlig i fila

SET NOT-PRE-A-N = WORD - PRE-A-N ;

LIST PUNCT-LEFT = (PUNCT LEFT) ;
LIST PUNCT-RIGHT = (PUNCT RIGHT) ;

 # This set ist not only for what can
                            # stand in front of appositions but also
                            # postmodifiers.




SET NOT-NPMOD     = WORD - PRE-NP-HEAD OR ABBR ;
# This is the previous NPNH (npnh) set.
# NOT-NPMOD  = "NOT-PRE-NP-HEAD"

SET NOT-NPMOD-ACC     = NOT-NPMOD - Acc OR ABBR ;
SET NOT-NPMOD-ACC-ADV     = NOT-NPMOD - Acc - Adv OR ABBR ;
# To be used in mappingrules, before the disambuation of Acc and Gen.

SET NOT-NPMODADV    = WORD - PRE-NP-HEAD - Adv ;
# NOT-NPMODADV = "NOT-PRE-NP-HEAD-OR-ADV"
SET NOT-NPMODADV-INDEF   = WORD - PRE-NP-HEAD - Adv - Indef ;
## NOT-NPMODADVI = "     ...-OR-INDEF"
SET NOT-NPMODADVII  = WORD - PRE-NP-HEAD - Adv - Indef ;
SET NOT-NPMODADVIIP = WORD - PRE-NP-HEAD - Adv - Indef ;
# <== is this our NOT-NPMOD set?
SET NOT-NPMODCC   = WORD - PRE-NP-HEAD - COMMA - @CNP ;
SET NAPP     = WORD - PRE-APP ;



#!! * Miscellaneous sets
# ------------------


SET NUM = Num - OKTA ;

# this set does not contain ordinals, I am not sure if that is necessary.

SET NOT-NUM = WORD - Num ;

LIST MANGA = "máŋga" "galle" ;
 # Not referred to by any rule.

LIST SOAMES = "soames" "muhtun" ;





LIST COMPAR = ("dávji" A Comp) "eanet" "earalágan" "eará" "earret" "seammás" "seammalágan" "seamma_láhkái" ;


LIST CONTRA = "muhto" ;
 # In lean muitalan, muhto dál muitalan.

LIST PROSEANTA = "proseanta" "%" ;

SET REAL-CLB = CLB - COMMA ;


SET NOT-INITIAL-CC = WORD - INITIAL - CC ;



#!! * Border sets and their complements
# ---------------------------------

SET CP = (Pron Interr) ;

LIST BOUNDARYSYMBOLS =  "\;" ":" "-" "–" ;

	# does not include CS, because of "go" in questions, before it is disambugated.
	# includes CP
	# this one includes @CVP, the conjunction which actually connects two sentences (each with a finite verb) to each other,
	# and not @CNP, which coordinates internal NP-/AdvP-/AP ... coordination
	# To be used only AFTER the disambiguation of @CVP and @CNP taking place in the chapter right before "Disambiguating pronouns"


SET BOC = S-BOUNDARY OR BOS ;
SET BOC-PUNCT = BOC - ("-") - ("–") ;
SET EOC = S-BOUNDARY OR EOS ;

SET NP-BOUNDARY = BOS OR EOS OR REAL-CLB OR VFIN OR Inf OR PPRON-NOT-GEN OR Recipr OR Pr OR Interj OR CS OR CP OR @CVP ;

SET APP-BOUNDARY = REAL-CLB OR VFIN OR Inf OR Sup OR Recipr OR Pr OR Interj OR CS OR CP OR PrfPrc - @>N ;
# A special barrier used with mapping of appositions.

# This set contains FMAINV with @, which means that it functions for all kind of mainverbs after the verb-mapping rules
SET SV-BOUNDARY = S-BOUNDARY OR Inf - FAUXV OR Sup OR FMAINV ;
 # VFIN-NOT-AUX ;
 # should be MAIN-V linked to VFIN-aux to the left. (cg-3)
# This set is ment to use in rules for disambiguating due to verbs or verbsets. It contents @.

SET SVF-BOUNDARY = S-BOUNDARY OR VFIN ;

# This set is ment to use in rules for disambiguating due to verbs or verbsets.
# Here we search for either an S-BOUNDARY or a finite verb, either aux or main.

LIST CASE = Nom Acc Gen Dat ;



LIST MEASUREADJS = "ruvdnosaš" "kruvdnosaš" ;

#!! * Syntactic sets
# --------------

LIST ALLSYNTAG = (@+FAUXV) (@+FMAINV) (@-FAUXV) (@-FMAINV) (@-FSUBJ>)(@-FOBJ)(@-F<ADVL)(@-FADVL>)(@>A) (@>ADVL) (@ADVL<) (@<ADVL) (@ADVL>) (@ADVL) (@>N) (@APP) (@APP-N<) (@APP-Pron<) (@APP>Pron) (@APP-Num<) (@APP-ADVL<) (@VOC)(@CNP) (@CVP) (@P<) (@>P) (@HNOUN) (@INTERJ) (@Pron<) (@OBJ) (@OBJ>) (@<OBJ) (@OPRED) (@<OPRED) (@OPRED>) (@SPRED<OBJ) (@PCLE) (@COMP-CS<) (@N<) (@SPRED) (@<SPRED) (@SPRED>) (@PPRED) (@Num<) (@SUBJ) (@<SUBJ) (@SUBJ>) (@X);

LIST HEAD = @SUBJ> @<SUBJ @SUBJ @OBJ @OBJ> @<OBJ @ADVL @ADVL> @<ADVL @SPRED> @<SPRED @SPRED @OPRED> @<OPRED @OPRED @-FSUBJ> @-FOBJ> @-FADVL> @-FSPRED> @-F<SUBJ @-F<OBJ @-F<ADVL @-F<SPRED ;


SET NON-APP = ALLSYNTAG - (@APP);





#!! These were the set types.


         SECTION         #



#!! !!Adverbials

MAP:advl> (@ADVL>) TARGET Adv (*-1 BOS OR CLB BARRIER VFIN)(*1 VFIN);
MAP:<advl (@<ADVL) TARGET Adv (*-1 VFIN)(*1 EOS OR CLB BARRIER VFIN);

#!! !(@+FMAINV) and (@+FAUXV) and (@-FAUXV)


#!! * __+FAUXVcop__ AUX  COPULAS     
MAP:+FAUXVcop (@+FAUXV) TARGET COPULAS (*1 Inf BARRIER SV-BOUNDARY OR AUX LINK NOT 0 Adv OR OBJ) ;



#!! * __+FMAINVcop__ COPULAS verbs     
MAP:+FMAINVcop (@+FMAINV) TARGET VFIN + COPULAS (*1 Nom LINK 1 Inf) ;
MAP:+FMAINVcop (@+FMAINV) TARGET PrfPrc + COPULAS (*1 Nom LINK 1 Inf) ;

#!! * __+FMAINVAux1__  
MAP:+FMAINVAux1 (@+FMAINV) TARGET VFIN + AUX-OR-MAIN (NEGATE *1 Inf BARRIER S-BOUNDARY);
	#$ Maid Máret áiggui goarrumis?




    
#!! * __+FMAINV__  to the remaining finite verbs which are not AUX    
MAP:+FMAINV (@+FMAINV) TARGET VFIN-NOT-AUX (NEGATE *0 VFIN-NOT-AUX OR @+FMAINV BARRIER S-BOUNDARY OR COMMA)(NEGATE 0 Inf LINK -1 CC LINK *-1 Inf BARRIER REAL-V LINK -1 AUX) ;
	#$ Boađe boahtte vahku.
	#$ Son lea oappáin náitalan.
	#$ Mánná čohkána láhttái.
	#$ Son gii oažžu lobi, galgá vuostáiváldit goartta dahje sullasačča, mii čájeha ahte sus lea lohpi.
	#% Mun lean ráhkkásisttán ožžon cummá.
	#$ Ovdal go čielggadan dan lagabui,...

MAP:+FMAINVC (@+FMAINV) TARGET VFIN-NOT-AUX ;


# Mapping both verbs in a rel bisetning even if no comma
MAP:+FMAINVRel1 (@+FMAINV) TARGET VFIN-NOT-AUX (NOT 0 V + OBJ OR V + SUBJ OR V + Adv OR (V @>N) OR (V @N<) OR Adv) (*-1 ("sum") + CS BARRIER SV-BOUNDARY LINK NEGATE *-1 VFIN BARRIER S-BOUNDARY) ;
MAP:+FMAINVRel2 (@+FMAINV) TARGET VFIN-NOT-AUX (NOT 0 V + OBJ OR V + SUBJ OR V + Adv OR (V @>N) OR (V @N<) OR Adv OR N) (*-1 FMAINV BARRIER REAL-V LINK *-1 ("sum") + CS BARRIER SV-BOUNDARY LINK NEGATE *-1 VFIN) ;
	#$ Áldu mii dálvvi miehtá njamaha miesi gohčoduvvo čearpmateadni.

MAP:+FMAINV (@+FMAINV) TARGET VFIN-NOT-AUX (NOT 0 SYN-V) (*-1 (N Nom) OR (Pron Nom) BARRIER NOT-ADV-PCLE LINK NOT 0 Inf LINK NEGATE *-1 REAL-V - @>N BARRIER S-BOUNDARY OR COMMA)(NEGATE *1 VFIN OR PrfPrc - @>N BARRIER S-BOUNDARY OR COMMA) ;

MAP:-FMAINV (@-FMAINV) TARGET PrfPrc (NOT 0 SYN-V) (*-1 FAUXV BARRIER REAL-V OR S-BOUNDARY)(NEGATE 0 AUX LINK *1 Inf BARRIER REAL-V OR S-BOUNDARY) ;
	#$ Čuollun sáhttá leat dušše okta fierbmi gurgaluvvon.

MAP:+FMAINV (@+FMAINV) TARGET AUX + VFIN (NEGATE *1 Inf OR PrfPrc - @>N ) ;
	#$ Mearrasápmelaččat ledje áŋgiris ja oahppan bivdit.
	


MAP:+FMAINV (@+FMAINV) TARGET VFIN-NOT-AUX + Pl (NOT 0 SYN-V)(*1 NP-HEAD-PL-NOM BARRIER NOT-NPMODADV) ;


MAP:-FMAINV (@-FMAINV) TARGET Sup ;

MAP:IM (@IM) TARGET IM ;




















#!! !!Numeral outside the sentence


#!!	* __ordHNOUN__	
MAP:NumHNOUN (@HNOUN) TARGET (ord) (-1 BOS) ;	
	#$ 4. Álbmotskuvlla ja oahpaheaddjiseminára gaskasaš áigi.




#!! * __n<titel1__ (@N<) for ("jr") or ("sr"); if first one to the left is Prop
MAP:n<titel1 (@N<) TARGET ("jr") OR ("sr") (-1 Prop) ;
	#$ Loahpas jearai Johttisámelisttu Anders Somby jr. sudnos njuolga háliida go čearru gulahallat, juo dahje ii.



#!! * __n<titel2__ (@N<) for INITIAL; if first one to the left is a noun, or if to the left of you is a single letter which is part of a noun conjunction ''bustávas e ja f gáibiduvvo''
MAP:n<titel2 (@N<) TARGET INITIAL ((-1 N) OR (-1 CC LINK -1 INITIAL LINK -1 N))(NEGATE 1 Prop OR Num OR INITIAL) ;
	#$ Mearrádusaide nugo namahuvvo nuppi lađđasis bustávas e ja f gáibiduvvo ovttamielalašvuohta.



MAP:>nAttr (@>Num) TARGET Num - (Sg Nom) - (Sg Acc) (1 Num)  ;
MAP:>nAttr (@>Num) TARGET Attr OR CURRENCY (1 Num)  ;
MAP:>nAttr (@>A) TARGET Attr - Dem - Pron (*1 A - Attr OR Ord - Gen BARRIER NOT-NPMOD OR CC OR (N Gen) OR COMMA OR PUNCT)  ;


MAP:>nAttr (@>A) TARGET (Indef Attr) (*1 A - Gen OR Ord - Gen BARRIER NOT-NPMOD OR CC OR (N Gen) OR COMMA OR PUNCT)  ;
	#$ Dattetge ii leat muitaluvvon makkárge namahan veara geavahanriiddu birra dálolaččaid ja boazodoalu gaskkas.

#!! * __>nAttr__ (@>N) for Attr; if there is a noun to your right
MAP:>nAttr (@>N) TARGET A + $$CASE (*1 N + $$CASE BARRIER NPNH)  ;

#!! * __n>Indef__ (Pron Indef Attr); if eará is to the right
MAP:n>Indef (@>Pron) TARGET (Pron Indef Attr) (*1 ("eará") BARRIER NP-BOUNDARY OR Num OR A - Attr OR Pr OR Ord) ;
	#$ Galgat go mii vuordit muhtun eará?
	#% Dat berre leat oktasaš buot ovttaahkásaš mánáide Loabágis.
	#Comment: should be expanded



MAP:>n>sasj (@>A) TARGET Num (1 MEASUREADJS)(2 N);



MAP:>nNoun (@>N) TARGET Gen (*1 N BARRIER NOT-NPMODADV OR A - Attr) ; #(NEGATE 0 OKTA + Nom LINK *1 (N Pl Loc) BARRIER NOT-NPMOD)()(NEGATE 0 HUMAN LINK 1 (Actio Nom) LINK 1 N) ;



MAP:>nplc (@>N) TARGET (Prop Sem/Plc Sg Nom) (1 Sem/Plc) ;
	#$ Paul Fjellheim lea riegádan 1931:s, ja lea bajásšaddan Fjellheim báikkis.



#!! * __>pron2__ (@>Pron) for (Refl Nom) if; first one to the right is Refl
MAP:>pron2 (@>Pron) TARGET Refl + Nom (1 Refl OR Pers) ;
	#$ Sis lea nana árbevierru veahkehit ieš iežas persovnnalaš fierpmádagaid vehkiin.

#!! * __>pron3__ (@>Pron) for (Pron Recipr) if; first one to the right is (Pron Recipr)
MAP:>pron3 (@>Pron) TARGET (Pron Recipr) (1 (Pron Recipr)) ;
	#$ Mánát iešguđege sogas internáhtas deaivvadedje ja ovttasbargodilálašvuođaid bokte várra lahkanedje guhtet guimmiideaset.

#!! * __vaikko__ (@>Pron) for vaikko if; first one to the right is Indef
MAP:vaikko (@>Pron) TARGET ("vaikko") (1 Indef) ;
	#$ Dákkár stuora gávpogis olmmoš sáhttá bargat vaikko maid.

#!! * __vaikkoman__ (@>ADVL) for vaikko if; first one to the right is man
MAP:vaikkoman (@>ADVL) TARGET ("vaikko") (1 ("man" Adv)) ;
	#$ Romssas, Davvi-Norgga stuorimus gávpogis, leat vaikko man ollu studeanttat.




MAP:pron< (@Pron<) TARGET $$CASE (0 Refl LINK *-1 $$CASE + Pers BARRIER S-BOUNDARY OR CC) ;


MAP:app<n (@APP-N<) TARGET (Num Nom) IF (-1 (Prop Sem/Sur Nom) LINK -1 ("\("))(1 COMMA LINK 1 ("s") LINK 1 CARDINALS LINK 1 ("\)"));
	#$ (Simonsen 1959, s. 45)


MAP:r286 (@APP-N<) TARGET (N Nom) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (N Nom))(1 EOS) ;
MAP:r287 (@APP-N<) TARGET (N Nom) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (N Nom))(1 COMMA LINK 1 APP-BOUNDARY)  ;
	## Gulan go Bienne Káre-Ánne, skuvlla bassi, bohtá.
MAP:r288 (@APP-Pron<) TARGET (N Nom) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (Pron Nom))(1 EOS) ;
MAP:r289 (@APP-Pron<) TARGET (N Nom) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (Pron Nom))(1 COMMA LINK 1 S-BOUNDARY) ;
	#$ Mon lean Will Turner, Sáppatbátti Turnera bárdni!
MAP:app-pron< (@APP-Pron<) TARGET $$CASE - Gen (0 N LINK -1 $$CASE + Pers)(1 VFIN) ;
	#$ Ja moai boazodoalloáirasat áigguime vaikko guovttá joatkit barggu.

	

MAP:nugoAppn< (@APP-N<) TARGET (N Acc) IF (*-1 ("nugo") OR ("sihke") BARRIER APP-BOUNDARY LINK -1 COMMA LINK -1 (N Acc) LINK *-1 BOS BARRIER NOT-NPMOD)(*1 COMMA BARRIER APP-BOUNDARY) ;
MAP:nugoAppn< (@APP-Pron<) TARGET (N Acc) IF (*-1 ("nugo") OR ("sihke") BARRIER APP-BOUNDARY LINK -1 COMMA LINK -1 (Pron Acc) LINK *-1 BOS BARRIER NOT-NPMOD)(*1 COMMA BARRIER APP-BOUNDARY) ;
	#$ Muhtun sámi biktasiid, nugo gápmagiid ja vuoddagiid, sii geavahedje guhkit, gitta 1960-logu rádjai.

MAP:r292 (@APP-Pron<) TARGET (N Acc) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC OR (N Nom) LINK -1 (Pron Acc) LINK NEGATE *-1 COMMA BARRIER APP-BOUNDARY OR CC)(1 EOS) ;
MAP:r293 (@APP-Pron<) TARGET (N Acc) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC OR (N Nom) LINK -1 (Pron Acc) LINK NEGATE *-1 COMMA BARRIER APP-BOUNDARY OR CC)(1 COMMA LINK 1 S-BOUNDARY) ;
	#$ Oidnet go Mihkkala, min nuoramus bártni?
	#$ Mon oainnán fierpmi, su mearkka, ja dieđán ahte Spider-Man lea leamaš das.



MAP:r249 (@APP-ADVL<) TARGET Pr IF (*-1 COMMA)(*1 (N Gen) OR (Pers Gen) BARRIER NOT-NPMOD LINK 1 EOS);
MAP:r250 (@APP-ADVL<) TARGET Pr IF (*-1 COMMA)(*1 (N Gen) OR (Pers Gen) BARRIER APP-BOUNDARY OR CC LINK 1 COMMA);
	#$ Dolin, ovdal soađi, olbmot lávejedje vuovdit joŋaid.


SET NOT-NP = VFIN-NOT-NEG OR Inf OR Interj OR CS ;


	# Vocative - VOC

#!! * __voc__ (@VOC) for Nom HUMAN; if comma to the left and an second person verb or pronoun to the left. To the right is the end of the sentence
MAP:voc (@VOC) TARGET Nom IF (*-1 COMMA BARRIER NOT-NP OR CC LINK *-1 (V 2Sg) OR (V Pl) OR (Pron 2Sg) OR (Pron Pl))(1 EOS)(0 HUMAN)(NEGATE 0 Sg LINK *-1 V-SG3 BARRIER V);
	#$ Vuoi du, Betsaida!

MAP:voc (@VOC) TARGET Nom IF (-1 Attr LINK *-1 COMMA BARRIER NOT-NP OR CC LINK *-1 (V 2Sg) OR (V Pl) OR (Pron 2Sg) OR (Pron Pl))(1 EOS)(0 HUMAN)(NEGATE 0 Sg LINK *-1 V-SG3 BARRIER V);



MAP:voc (@VOC) TARGET (N Nom) IF (*-1 COMMA BARRIER NP-BOUNDARY LINK *-1 ("boahtin" Nom) BARRIER V OR S-BOUNDARY LINK -1 ("bures"))(1 EOC);
	## Bures boahtin Čáhppes Bearralii, Miss Turner!

MAP:voc (@VOC) TARGET Nom IF (-1 COMMA)(0 Pers)(0 2Sg Or Pl) (*1 Nom BARRIER NOT-NPMOD LINK 1 EOS);
	## Gáidet eret mu luhtte, dii verrošeaddjit!

MAP:voc (@VOC) TARGET (N Nom) IF (-2 BOS)(-1 (Imp 2Sg))(NEGATE -1 Adv )(1 EOS);
	## Gula eadni!

MAP:voc (@VOC) TARGET (N Nom) IF (-3 BOS)(-2 (Imp 2Sg))(NEGATE -2 Nom) (-1 COMMA)(1 COMMA);
	## Buvttes, Máhtte, goikemuoraid!

MAP:voc (@VOC) TARGET (N Nom) IF (-4 BOS)(-3 (V 2Sg))(-2 go)(-1 COMMA)(1 COMMA);
	## It go, bártnážan, boađáše fargga ruoktot?

MAP:voc (@VOC) TARGET (N Nom) IF (*-1 BOS BARRIER NOT-ADV-PCLE)(0 HUMAN LINK 1 EOS);
	#$ Ustibažžan!


MAP:r308 (@APP-N<) TARGET (N Nom) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (N Nom) LINK *-1 BOS BARRIER APP-BOUNDARY)(1 COMMA LINK 1 VFIN) ;
MAP:r309 (@APP-Pron<) TARGET (N Nom) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (Pron Nom) LINK *-1 BOS BARRIER APP-BOUNDARY)(1 COMMA LINK 1 VFIN) ;
	#$ Will Turner, Sáppatbátti Turnera bárdni, lea boahtán.

MAP:r312 (@APP-N<) TARGET (N Nom) IF (-1 (N Gen) OR (Pers Gen) LINK *-1 CC BARRIER APP-BOUNDARY LINK -1 (N Gen) OR (Pers Gen) LINK *-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (N Nom))(1 EOS) ;
MAP:r313 (@APP-N<) TARGET (N Nom) IF (-1 (N Gen) OR (Pers Gen) LINK *-1 CC BARRIER APP-BOUNDARY LINK -1 (N Gen) OR (Pers Gen) LINK *-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (N Nom))(1 COMMA LINK 1 S-BOUNDARY) ;

MAP:r314 (@APP-Pron<) TARGET (N Nom) IF (-1 (N Gen) OR (Pers Gen) LINK *-1 CC BARRIER APP-BOUNDARY LINK -1 (N Gen) OR (Pers Gen) LINK *-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (Pron Nom))(1 EOS) ;
MAP:r315 (@APP-Pron<) TARGET (N Nom) IF (-1 (N Gen) OR (Pers Gen) LINK *-1 CC BARRIER APP-BOUNDARY LINK -1 (N Gen) OR (Pers Gen) LINK *-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (Pron Nom))(1 COMMA LINK 1 S-BOUNDARY) ;


MAP:r316 (@APP-N<) TARGET (N Nom) IF (*-1 ("nugo") OR ("sihke") BARRIER APP-BOUNDARY LINK -1 COMMA LINK -1 (N Nom))(*1 EOS BARRIER APP-BOUNDARY) ;
MAP:r317 (@APP-Pron<) TARGET (N Nom) IF (*-1 ("nugo") OR ("sihke") BARRIER APP-BOUNDARY LINK -1 COMMA LINK -1 (Pron Nom))(*1 EOS BARRIER APP-BOUNDARY) ;
	#$ Návetgoađis ledje ealut, nugo sávzzat, gáiccat ja gusat. 

MAP:r318 (@APP-N<) TARGET (N Nom) IF (*-1 ("nugo") OR ("sihke") BARRIER APP-BOUNDARY LINK -1 COMMA LINK -1 (N Nom) LINK *-1 BOS BARRIER APP-BOUNDARY)(*1 COMMA BARRIER APP-BOUNDARY LINK 1 VFIN) ;
MAP:r319 (@APP-Pron<) TARGET (N Nom) IF (*-1 ("nugo") OR ("sihke") BARRIER APP-BOUNDARY LINK -1 COMMA LINK -1 (Pron Nom) LINK *-1 BOS BARRIER APP-BOUNDARY)(*1 COMMA BARRIER APP-BOUNDARY LINK 1 VFIN) ;
	#$ Mu vánhemat, sihke áhčči ja eadni, leaba jápmán.

MAP:r320 (@APP-N<) TARGET (N Acc) IF (*-1 ("nugo") OR ("sihke") BARRIER APP-BOUNDARY LINK -1 COMMA LINK -1 (N Acc) LINK *-1 BOS BARRIER APP-BOUNDARY)(*1 COMMA BARRIER APP-BOUNDARY) ;
MAP:r321 (@APP-Pron<) TARGET (N Acc) IF (*-1 ("nugo") OR ("sihke") BARRIER APP-BOUNDARY LINK -1 COMMA LINK -1 (Pron Acc) LINK *-1 BOS BARRIER APP-BOUNDARY)(*1 COMMA BARRIER APP-BOUNDARY) ;
	#$ Muhtun sámi biktasiid, nugo gápmagiid ja vuoddagiid, sii geavahedje guhkit, gitta 1960-logu rádjai.

#MAP (@SUBJ>) TARGET Nom (*-1 BOS BARRIER WORD)(1 (":")) ;
#MAP (@<SPRED) TARGET Nom (*-1 (":") BARRIER WORD)(*1 EOS BARRIER Nom) ;
	#$ Fáksa: 22242786



#!! * __Particle<subj __ (@PCLE)
#MAP:Particle<subj (@PCLE) TARGET ("son") IF (-1 MO-MANge )(1 ANIMATE + Nom LINK 1 @+FMAINV OR @-FMAINV);
	#$ Mo son Duommá lea dahkan?
	#$ Dan viesu son mun dovddan?
	#$ Lea go son Máret boahtán?
	#$ Leago son Máret boahtán?
	#[MO-MANge] son Máret boahtá?
	#Comment: There is no such set as ANIMATE (yet)..

	# Exsistential subjects - SUBJ

#!! * __spred<obj__ (@SPRED<OBJ) for Acc; the object of an SPRPED. Not to be mistaken with OPRED. If SPRED is to the left, and copulas is to the left of it. Nom or Hab are found sentence initially.
MAP:spred<obj (@SPRED<OBJ) TARGET Acc (*-1 Nom BARRIER NOT-NPMODADV LINK *-1 COPULAS + FMAINV BARRIER NOT-ADV-PCLE LINK *-1 Nom OR <hab> BARRIER WORD)(NEGATE *1 TRANS-V + FMAINV BARRIER SV-BOUNDARY OR COMMA) ;
	#$ Mánát leat oažžulat guliid.
	#$ Dain lea fáktemuš juohke balvva.
	#% Divššohasas lea vuoigatvuohta iežas journála geahččat

SET NOT-EXT = A OR Pers OR Dem ;
LIST A-EXT = "riekta" "vejolaš" ;


	#$ Sus lea alddis buorit attáldagat.


#!! * __<extSubj__ (<ext> @<SUBJ) for Nom; if leat to the left and sentenceboundary







	# Subject predicatives - SPRED


#!! * __<spred__ (@<SPRED) for A Nom or N Nom if; the subject Nom is on the same side of copulas as you: on the right side of copulas
MAP:<spred (@<SPRED) TARGET (A Nom) OR (N Nom) IF (*-1 (N Nom) BARRIER NOT-A LINK -1 COPULAS + FMAINV)(NEGATE -1 @<SPRED) ;
	#$ Girjji namma čujuha dasa ahte dološ myhtain leat sámit mánát.




#!! * __<spredSg__ (@<SPRED) for Sg Nom
MAP:<spredSg (@<SPRED) TARGET (Sg Nom) IF (*-1 @CNP BARRIER V - COPULAS OR S-BOUNDARY LINK *-1 @<SPRED BARRIER WORD) ;
	#$ Son lea mu oabbá, ja 10 jagi boaris.
	#$ Son oinnii buot dan mii lea ráhkistan ja gudnejahttin veara.
	#$ Munnje lei dehálaš ahte áiggošin leat bahánihkkán.
	#$ Mus ii leat biila iige mopeda.

#!! * __<spredPg__ (@<SPRED) for Pl Nom
MAP:<spredPl (@<SPRED) TARGET (Pl Nom) IF ((*-1 COPULAS BARRIER NOT-NPMODADV LINK *-1 (Pl Nom) OR PLPRON + Nom BARRIER NOT-ADV-PCLE) OR (*-1 COPULAS BARRIER NOT-NPMODADV LINK -1 Nom LINK *-1 CC BARRIER NOT-NPMOD LINK -1 Nom) OR (*-1 COPULAS BARRIER NOT-NPMODADV LINK *-1 FAUXV BARRIER NOT-ADV-PCLE LINK *-1 (Pl Nom) OR PLPRON + Nom BARRIER NOT-ADV-PCLE)) ;
	#$ Arkiivaávdnasat leat 25-30 jagi boarrásat.

#!! * __<spred__ (@<SPRED) for Nom; if copulas to the left, and Nom or sentence boundary to the left of copulas. First one to the right is EOS.
MAP:<spred (@<SPRED) TARGET Nom IF (*-1 COPULAS + FMAINV BARRIER NOT-NPMODADV LINK -1 Nom OR S-BOUNDARY)(1 EOS) ;
	#$ Arkiivaávdnasat galget sáddejuvvot go leat sullii 25-30 jagi boarrásat.


MAP:r492 (@SPRED>) TARGET (Interr Gen) IF (NEGATE *1 A OR N BARRIER NOT-NPMOD) (NEGATE *1 V - FAUXV BARRIER S-BOUNDARY);
	#Commet: Not in use?


MAP:spredSg> (@SPRED>) TARGET (Sg Nom) IF (1 (Sg Nom) OR SGPRON + Nom OR (Indef Nom) LINK 1 COPULAS) ;
	#$ Mii mun lean?

#!! * __AdjSpredSg>__ (@SPRED>) for A Sg Nom; if copulas to the right, but not if A or @<SPRED are found to the right of copulas
MAP:AdjSpredSg> (@SPRED>) TARGET (A Sg Nom) IF (*1 COPULAS + FMAINV BARRIER SV-BOUNDARY OR COMMA OR CC LINK NEGATE *1 A OR @<SPRED BARRIER NOT-NPMOD);
	#$ Buorre lea oažžut su boahtit deike.
	#$ Divrras ii leat gal barggu ektui.
	#% Dási ferte árvvoštallat daláš gáibádusaid ektui, ja internáhtat ledje buorebut go priváhta olbmuid luhtte orrut.

MAP:spredPl> (@SPRED>) TARGET (Pl Nom) IF (1 (Pl Nom) OR PLPRON + Nom LINK 1 COPULAS)  ;

MAP:<spredCoor (@<SPRED) TARGET Nom IF (*-1 CC OR COMMA BARRIER NOT-NPMOD LINK -1 @<SPRED)(NEGATE 1 VFIN) ;


#!! * __spredCoord__ (@<SPRED) coordination for Nom; only if there already is a SPRED to the left of CNP. Not if there is some kind of comparison involved.
MAP:spredCoord (@<SPRED) TARGET Nom - OKTA IF (*-1 @CNP BARRIER NOT-NPMODADV )(*-2 @<SPRED BARRIER WORD - Adv)(NEGATE *-1 ("go" CS) BARRIER NOT-NPMOD LINK -1 ("nu" Adv))(NEGATE *-1 XGO BARRIER NOT-NPMOD);#(*1 EOS)(NEGATE *1 FMAINV) ;
	#$ De eai leat šat dušše tálat, muhto bustávat maid.
	#% Dat ledje beakkán ja dovddus olbmot nu go Diaz.


	# Subjects - SUBJ


LIST PERS-TAGS = 1Sg 2Sg 3Sg Pl ;

MAP:subj>Pers (@SUBJ>) TARGET $$PERS-TAGS + Nom IF ((*1 $$PERS-TAGS + VFIN BARRIER SV-BOUNDARY OR N) OR (1 (Sg Com) LINK *1 $$PERS-TAGS + VFIN BARRIER SV-BOUNDARY OR N) OR (*1 Refl BARRIER NOT-ADV-PCLE LINK *1 $$PERS-TAGS + VFIN BARRIER NOT-ADV-PCLE)) ;
	#$ Moai Birehiin barggašeimme mánáidgárddis.

MAP:subj>Pers (@SUBJ>) TARGET (1Sg Nom) (-1 CC LINK *2 (V 1Pl) BARRIER NOT-ADV-PCLE) ;

MAP:subj>Pers (@SUBJ>) TARGET (1Sg Nom) (1 CC LINK *1 (N Pl) BARRIER NOT-NPMOD LINK *1 (V 1Pl) BARRIER NOT-ADV-PCLE) ;
	#$ Mii du namma lea?
	#$ Gii ..
	#% Lea go son Máret boahtán?



MAP:<subjPers (@<SUBJ) TARGET $$PERS-TAGS + Nom IF (*-1 $$PERS-TAGS + VFIN BARRIER NOT-ADV-PCLE) ;



#!! * __subj>Sg__ (@SUBJ>) for Nom Sg; if VFIN + 3Sg to the right.
MAP:subj>Sg (@SUBJ>) TARGET (Nom Sg) IF (*1 VFIN + 3Sg BARRIER V OR S-BOUNDARY OR COMMA);
	#$ Nuba áddjá árvala ahte eiseválddit galggaše bálkáhit baicce vuorrolohkkiid, vai rehkenasto vuorruid mearri maiddái, iige dušše dat mearri guliin mii goddo deanus.

#!! * __Sg<subj__ (@<SUBJ) for Nom Sg; if VFIN 3Sg or Du2 to the left (no HAB allowed to the left).
MAP:Sg<subj (@<SUBJ) TARGET (Nom Sg) IF (*-1 VFIN + 3Sg  BARRIER S-BOUNDARY)(NEGATE *-1 <hab> BARRIER BOC) ;
	#$ Vuovssá goddá boanda.
	#$ Sin mielas lei dát hui givssálaš.
	#% Oppalaš hábmema strategiija mii galgá váikkuhit dasa ahte servodat šaddá buohkaide olahahttin, ja dasa ahte vealaheapmi eastaduvvo, lea maid deattuhuvvon.




MAP:subjCoorTEST (@SUBJ>) TARGET Nom IF ((1 CC OR COMMA LINK *1 @SUBJ> BARRIER NOT-NPMOD) OR (*-1 CC BARRIER NOT-NPMOD OR CC LINK -1 @SUBJ>)) ;

MAP:subjCoorTEST (@<SUBJ) TARGET Nom IF ((1 CC OR COMMA LINK *1 @<SUBJ BARRIER NOT-NPMOD) OR (*-1 CC BARRIER NOT-NPMOD OR CC LINK -1 @<SUBJ)) ;

MAP:subjCoorTEST (@SUBJ>) TARGET Nom IF ((1 CC OR COMMA LINK *1 @SUBJ>  BARRIER NOT-NPMOD) OR (*-1 CC BARRIER NOT-NPMOD OR CC LINK -1 @SUBJ>)) ;

MAP:subjCoorTEST (@<SUBJ) TARGET Nom IF ((1 CC OR COMMA LINK *1 @<SUBJ BARRIER NOT-NPMOD) OR (*-1 CC BARRIER NOT-NPMOD OR CC LINK -1 @<SUBJ)) ;

MAP:subj>Num (@SUBJ>) TARGET (Num Nom) (*1 (N Sg Gen) BARRIER NOT-A LINK *1 VFIN + Pl BARRIER NOT-ADV-PCLE) ;
MAP:<subjNum (@<SUBJ) TARGET (Num Nom) (*1 (N Sg Gen) BARRIER NOT-A)(*-1 VFIN + Pl BARRIER Nom OR S-BOUNDARY) ;



# Rules for complements


MAP:r253 (@Num<) TARGET (Sg Gen) IF (*-1 NUM BARRIER N OR MEASUREADJS OR REAL-CLB OR PUNCT LINK 0 Nom OR Acc LINK NOT 0 Ord)(NEGATE 0 Num)(NEGATE 1 A OR N)(NEGATE -1 COMMA);
	#$ Mun vuiten 50 ru.

LIST COUNTABLE = "oassi" "kapihtal" "paragráfa" ;


#!! * __-fsubj>__ (@-FSUBJ>) for HUMAN Gen; in a NP-clause. To your right is Actio Nom followed by a noun
MAP:-fsubj> (@-FSUBJ>) TARGET HUMAN + Gen (1 (Actio Nom) LINK 1 N) ;
	#$ Máreha čállin teavsttat ledje buoremusat.







MAP:s-boundary=advl> (@ADVL>) TARGET Adv + S-BOUNDARY (*1 FMAINV) ;
	#$ Dál de viimmat asttan lohkat reivve.



	# Infinite object - FOBJ

#!! * __-fobj>__ (@-FOBJ>) for Acc if front of abessive, gerundium, actio locative, perfectum participle or infinitive. First one to the right not allowed to be Acc though
MAP:-fobj> (@-FOBJ>) TARGET Acc (1 (TV VAbess) OR (TV Ger) OR (TV PrfPrc) OR (TV Inf) LINK 0 SYN-V LINK NOT 1 Acc) ;
	#$ Konvenšuvdnaevttohusa ráhkadettiin delegašuvnnat leat váldán vuhtii Ruoŧa ođđa boazodoallolága, ja boazodoallolágaid maiguin barget dál Norggas.
	#$ Duosttažan go dan dahkat?





MAP:advl>cs (@ADVL>CS) TARGET Adv (*-1 BOC BARRIER NOT-ADV)(1 CS LINK *1 FMAINV) ;
	#$ Danne go ..
	#$ Nu guhká go ...


MAP:<advlEOS (@<ADVL) TARGET Pr (*-1 FMAINV)(*1 EOS BARRIER FMAINV);
	#$ Sámediggi lea miehtan sutnje máksit 800 ruvnno juohke árgabeaivvi ovddas, muhto ii fal lávvordagaid, sotnabeivviid ja bassebeivviid ovddas.
	#$ Dat sáhttet leat ovttasbargošiehtadusat oanahis áigái, dahje oktasašdoallu muhtin áiggiid jagis, dahje vaikko miehtá jagi.
	#$ Sosiálkuráhtorat eai gávdnon gilis ovdalgo 1960-logus.
	#% Daid sáhttá heaŋggastit dan heargái mii daid eará goahtemuoraid lea guoddimin, guokte bealji goappáge beallái hearggi.
	#Comment: Sámi dutkan ii leat dan dihte soaittáhagas válljejuvvon dutkansuorgi. <== galggašii doaibmat dalle go 'leat' oažžu rivttes analysa.


#!! * __<advlGen__ (@<ADVL) for (N Gen) if mainverb to the left and no noun to the right
MAP:<advlGen (@<ADVL) TARGET (N Gen) (*-1 FMAINV BARRIER SV-BOUNDARY)(NEGATE *1 N BARRIER NOT-A) ;
	#$ Ja dat rievvun lea dáhpáhuvván ollu gerddiid.
	#$ Nubbi ja goalmmát lađas gustojit seamma láhkai virgehasaid ja earrásiid fápmudeapmái dahkat mearrádusa meahcceeatnamiid nuppástuvvan geavaheamis.



#!! * __comma<advlEOS__ (@<ADVL) for Adv if; mainverb is to the left. Comma to the left and mainverb to the right in the same clause is not allowed
MAP:<advlADV (@<ADVL) TARGET Adv (*-1 FMAINV BARRIER SV-BOUNDARY)(NEGATE -1 COMMA LINK *1 FMAINV BARRIER S-BOUNDARY) ;
	#$ Guovdageainnu guovllut gal leat vel mu mielas sestojuvvon oalle bures dássážii, movt šat guhká.


#!! * __advl>inbetween__ (@ADVL>) for Adv; if inbetween two sentenceboundaries where no mainverb is present.
MAP:advl>inbetween (@ADVL>) TARGET Adv (*-1 BOC BARRIER FMAINV)(*1 S-BOUNDARY BARRIER FMAINV)  ;
	#$ Son muitala maid ahte nu guhká go orohagat eai vuosttal mearkkaid, de sii lávejit juolludit mearkkaid ohcciide.
	#$ Dál de viimmat asttan čállit reivve.

#!! * __comma<advlEOS__ (@<ADVL) for Adv if; comma found to the left and the finite mainverb to the left of comma. To the right is the end of the sentence.
MAP:comma<advlEOS (@<ADVL) TARGET Adv (*-1 COMMA BARRIER V LINK *-1 FMAINV BARRIER S-BOUNDARY)(*1 EOS BARRIER FMAINV) ;
	#$ Guovdageainnu guovllut gal leat vel mu mielas sestojuvvon oalle bures dássážii, movt šat guhká.
	#$ De eai leat šat dušše tálat, muhto bustávat maid.

#!! * __InitPP__
MAP:advl>PP (@ADVL>) TARGET Pr (*-1 BOS)(*1 V);

#!! * __cleanupPr__ (@ADVL) for Po: This rule tags all Pr:s as @ADVL if they haven't gotten a tag somewhere along the way.
MAP:cleanupPr (@ADVL) TARGET Pr (0 Pr);


	# PP complements

#!! * __P-NP__ P-compl
MAP:P-NP (@P<) TARGET N (-1C Pr);
MAP:P-NP (@P<) TARGET N (*-1C Pr BARRIER NPNH);

	# Infinite subjects - FSUBJ

#!! * __-fsubj>asAcc__ (@-FSUBJ>) for HUMAN Acc; if there is a verb @<OBJ to your left
MAP:-fsubj> (@-FSUBJ>) TARGET HUMAN + Acc (*1 (V @<OBJ) BARRIER NOT-ADV-PCLE) ;
	#$ Divtte bálvaleddjiidat ássat Gosenis!

#!! * __-f<obj__ (@-F<OBJ) for Acc if there is a transitive verb + SYN-V to your left
MAP:-f<obj (@-F<OBJ) TARGET Acc (*-1 (V TV) + SYN-V BARRIER V OR S-BOUNDARY) ;
	#$ Máret muitalii Máhte oaidnán guovžža.
	#$ Gurssa ulbmil lea oahppat goarrut Ivgu gávtti.
	#$ Dus lea vuoigatvuohta oažžut heivehuvvon oahpahusa.

#!! * __-fsubj>IV__ (@-FSUBJ>) for Acc; if there is an IV-verb acting as a @<OBJ to your right
MAP:-fsubj> (@-FSUBJ>) TARGET Acc (*1 (IV @<OBJ) BARRIER NOT-ADV-PCLE) ;
	#$ Sii lohket fatnasa gopmánan.
	#$ Mii vurddiimet dálkki buorránit.

#!! * __-fsubj>IV__ (@-FSUBJ>) for Acc; if there is an TV-verb acting as a @<OBJ to your right followed by an Acc
MAP:-fsubj> (@-FSUBJ>) TARGET Acc (*1 (V @<OBJ) BARRIER NOT-ADV-PCLE LINK *1 Acc BARRIER NOT-NPMOD) ;
	#$ Máhtte rábmui iežas vuoitit dan gilvvu.

#!! * __f<subj__ (@-F<SUBJ) for Nom if; (V @<OBJ) to the left.
MAP:f<subj (@-F<SUBJ) TARGET Nom (*-1 (V @<OBJ) BARRIER NOT-NPMODADV - @CNP) ;
	#$ Mii oaidnit vuoittuid beales leat elektruvnnalaš gálvvut hui bivnnuhat ja eai dábálaš bargobiergasat.
	#Comment: needs some more testing in another corpus



	# Predicatives - PPRED

MAP:<ppred (@<PPRED) TARGET (Pl Nom) (*-1 @<SPRED + Pl BARRIER NOT-ADV-PCLE OR ("ain")) ;
	#$ Mus leat gieđat nu galbmasat.
MAP:<ppred (@<PPRED) TARGET (Sg Nom) (*-1 @<SPRED + Sg BARRIER NOT-ADV-PCLE OR ("ain")) ;
	# Márehis lea oaivi bávččas.


#!! * __<opredAAcc__ (@<OPRED) for A Acc; if an other accusative to the left, and a transtive verb to the left of it. OR: if a transitive verb to the left, and an accusative to the left of it.
MAP:<opredAAcc (@<OPRED) TARGET (A Acc) IF ((*-1 Acc BARRIER NOT-ADV-PCLE LINK *-1 FMAINV + TV BARRIER NOT-ADV-PCLE) OR (*-1 FMAINV + TV BARRIER NOT-ADV-PCLE LINK *-1 Acc BARRIER SV-BOUNDARY))  ;
	#$ Son ráhkada gáhkuid hui buriid.
	#$ Gáhkuid son ráhkada hui buriid.

#!! * __TV<obj__ (@<OBJ) for Acc; if there is a transitive mainverb to the left in the clause. Not for Rel. Not if you are a numeral followed by a measure-noun
MAP:TV<obj (@<OBJ) TARGET Acc - Interr (*-1 FMAINV + TV BARRIER SV-BOUNDARY)(NEGATE -1 COMMA LINK *2 TRANS-V + FMAINV BARRIER SV-BOUNDARY);
	#$ Stueng háliidii ge oažžut johtui buoret oktavuođa sámi ja Bolivia eamiálbmot nuoraid gaskkas, go nuorat leat eamiálbmogiid boahtteáigi, mahkáš nuoraid lonuhanprográmma.



#!! !sma object
MAP:<obj (@<OBJ) TARGET (Nom Pl <sma>) - Interr  (*-1 FMAINV + TV BARRIER SV-BOUNDARY)(NEGATE -1 COMMA LINK *2 TRANS-V + FMAINV BARRIER SV-BOUNDARY) ;
MAP:obj> (@OBJ>) TARGET (Nom Pl <sma>) (*1 FMAINV BARRIER SV-BOUNDARY) ;






#!! * __Obj>__ (@OBJ>) for Acc; if there is a finite mainverb to the right in the clause. A really simple rule with no other restrictions..
MAP:Obj> (@OBJ>) TARGET Acc (*1 FMAINV BARRIER SV-BOUNDARY) ;
	#$ Dan duođaštit čállosat maid politihkkárat leat čálašan gieskat e-poasttain ja maid leat mediai suođđan.
	#$ Dán filmma leat Kárášjoga nuorat oaidnán, eaige šat vuolgge sirkusii.

#!! * __s-boun<obj__ (@<OBJ) for Acc; if sentenceboundary to your left and a transitive mainverb to the left futher to the left
MAP:s-boun<obj (@<OBJ) TARGET Acc - Num (*-1 S-BOUNDARY BARRIER FMAINV + TV LINK *-1 FMAINV + TV BARRIER SV-BOUNDARY) ;
	#$ Sii bukte skeaŋkkaid mánnái: golliid, suovvasiid ja myrra.
	#$ Iige láhka lihkahala vuoigatvuođaid mat vuođđuduvvet eará vuđđosii, ovdamearkan dakkáriid mat vuođđuduvvet dahkkojuvvon šiehtadussii.






# These nouns in essiv get @ADVL:
LIST ESS-ADVL = Sem/Time Sem/Wthr "baika" "čakčaseavdnjat" "čuoika" "čuovga"  "varra" ;

# These nouns/adjectives in essiv can get @ADVL:
LIST ESS-PROB-ADVL-N = ("bassi" N) "boaris" ("nuorra" N) ;







MAP:>advl (@<ADVL) TARGET Arab IF (*-1 FMAINV BARRIER S-BOUNDARY) ;
	#$ Stáhtabušeahta rámmat leat lassánan 5 % .

#!!	* __NInfheadliner__	
MAP:NInfheadliner (@HNOUN) TARGET Nom (NEGATE 0 VFIN)(1 Inf LINK NEGATE *1 WORD) ;	
	#$ Áigi soabadit.

#!!	* __Superlheadliner__	

	
	#$ Stuorimus maid sáhttá oažžut.



MAP:<subj (@<SUBJ <ext>) TARGET NP-HEAD-NOM - A OR (Num Nom) (*-1 COPULAS BARRIER (":") OR S-BOUNDARY LINK -1 Adv OR (@P<)) ;

#!! !!SUBJ MAPPING - leftovers
MAP:<subj (@<SUBJ) TARGET NP-HEAD-NOM - A OR (Num Nom) (*-1 FMAINV BARRIER (":") OR S-BOUNDARY) ;

#!! * __subj>ifV__ (@SUBJ>) for NP-HEAD-NOM, DUPRON or (Num Nom) if; a finite mainverb is found to the right. This is a cleanup rule for subjects
MAP:subj>ifV (@SUBJ>) TARGET NP-HEAD-NOM - A OR (Num Nom) (*1 FMAINV BARRIER (":"))(NEGATE *1 @SUBJ> BARRIER FMAINV OR FAUXV LINK NEGATE *2 FMAINV BARRIER EOS) ;

#!! * __hnoun>ifV__ (@SUBJ>) for NP-HEAD-NOM, DUPRON if. The counterpart of subj>ifV. You are HNOUN if there is a finite verb to your right, but NOT if there is a finite verb after a relative clause
MAP:hnoun>ifV (@HNOUN) TARGET NP-HEAD-NOM - A (*1 FMAINV BARRIER (":"))(NEGATE *1 @SUBJ> BARRIER FMAINV LINK 2* FMAINV BARRIER EOS ) ;
	#$ Ávdugas dat guhte vurke dán girjji profehtalaš sániid.
	#$ Ja ávdugas son guhte oskkui.
	#$ Ávdugasat sii geat moraštit.
	#$ Gonagas Agrippa ja dii buohkat geat lehpet dás minguin!
	#$ Olbmot geat ellet náitoslágan dahje guimmešvuođalágan gaskavuođain.
	#$ Dat geat ieža eai máhttán oppanassiige lohkat girjjiid.
	#% Sihke son ja su viellja Paul Danielsen, gii lei ovdaolmmoš vieljas maŋis, vácciiga osiid skuvlla Haviikkas.


#!! !!OBJ MAPPING - leftovers
MAP:<obj (@<OBJ) TARGET NP-HEAD-ACC (*-1 FMAINV BARRIER (":") OR S-BOUNDARY) ;
MAP:obj> (@OBJ>) TARGET NP-HEAD-ACC (*1 FMAINV BARRIER (":"))(NEGATE *-1 Interj BARRIER NOT-NPMOD) ;

#!! !!<logo> MAPPING for MT - experimental

ADD:logo1 (<logo>) TARGET Pers + Pl (0 Gen OR Acc LINK *-1 VFIN + Pl) ;

#!! !!HNOUN MAPPING

MAP:hnounNom (@HNOUN) TARGET NP-HEAD-NOM - A OR (Num Nom) 
(NOT *-1 Pr BARRIER NPNH)(NEGATE *0 V BARRIER (":"))(NEGATE *-1 PUNCT BARRIER (":") LINK -1 WORD) 
;

MAP:hnounNom (@HNOUN) TARGET A OR (Num Nom) (*-1 BOS BARRIER WORD)(*1 EOS BARRIER WORD) ;


MAP:HNOUN<advl (@<SPRED) TARGET Sem/Adr (-1 (":") LINK -1 Nom) ;
	#$ Fiskes, rukses, alit, ruoná ja muđui buotlágaš ivnnit.
	#$ Bargolávdegotti bargu: Álgobargu lei čielggadit min mandáhta.

MAP:hnounAdvl (@HNOUN) TARGET Acc (NOT *-1 Pr BARRIER NPNH)(NEGATE *0 V OR @HNOUN) ;
	#$ Juoba ge dán áigodagas.
MAP:hnounInterj (@HNOUN) TARGET Acc (*-1 Interj BARRIER NOT-NPMOD) ;



MAP:HNOUN<advl (@N<) TARGET Adv (*-1 @HNOUN BARRIER CRD OR (":") LINK NOT 0 Num OR Pron) ;
MAP:HNOUN<advl (@N<) TARGET Adv (-1 CRD LINK -1 @N<)(1 EOS) ;
MAP:HNOUN<advl (@<ADVL) TARGET Adv (*-1 @HNOUN BARRIER CRD OR (":")) ;
MAP:advl>HNOUN (@ADVL>) TARGET Adv (*1 @HNOUN BARRIER CRD OR (":")) ;
MAP:HNOUN<obj (@<OBJ) TARGET Acc (*-1 @HNOUN) ;
	#% Birasgáhttenlihkadus ja álgoálbmogat - ovttasbargit vai vuostálágaid?
MAP:obj>HNOUN (@OBJ>) TARGET Acc (*1 @HNOUN) ;
MAP:HNOUN<spred1 (@<SPRED) TARGET (A Nom) (*-1 @HNOUN) ;
	#$ Dii guoktilaččat!
MAP:spred>HNOUN (@SPRED>) TARGET (A Nom) (*1 @HNOUN) ;
MAP:HNOUN<spred2 (@<SPRED) TARGET (A Nom) OR (N Nom) (*-1 PUNCT BARRIER V LINK *-1 @HNOUN) ;
	#$ Birasgáhttenlihkadus ja álgoálbmogat – ovttasbargit vai vuostálagaid?
MAP:HNOUNcoor (@HNOUN) TARGET N (-1 @CNP LINK -1 @HNOUN) ;
	#$ Oslos ja Londonis.

MAP (@ADVL) TARGET Adv (-1 BOS) ;
#!! * __@<ADVLcoor__ (@<ADVL) for Adv if @CNP to the left and @ADVL to the left of it
MAP:@<ADVLcoor (@<ADVL) TARGET Adv (-1 @CNP LINK -1 @ADVL) ;
	#$ Odne vai ihttin?

	#$ Báhpaeamit, Margrethe Wiig, gii lei gasku giellamoivvi, ráhkadii iežas sárgumiiguin sámegiela Áppesa, mii lei stuorra ávkin sámegiela oahpahusas.

#!! !!CS mapping

MAP:CSasCVP (@CVP) TARGET CS (NOT -1 VFIN)(1 VFIN);

MAP:CSasCNPCVP (@CNP @CVP) TARGET CS;




#!! ! __missingX__ adds @X to all missings
MAP:missingX (@X) TARGET (?) ;

AFTER-SECTIONS

REMOVE:WORD WORD - ALLSYNTAG ;



#!! ! __therestX__ adds @X to all what is left, often errouneus disambiguated forms

MAP:leftoversX (@X) TARGET WORD ;

#!! ! __smeRemove__ removes the language tags <sma>, <sme>,  etc, before proceeding to the dep file.

SUBSTITUTE:smeRemove (<sme>) (*) TARGET (<sme>) ;
SUBSTITUTE:smjRemove (<smj>) (*) TARGET (<smj>) ;
SUBSTITUTE:smaRemove (<sma>) (*) TARGET (<sma>) ;

#MT RULES for sme-sma
#SUBSTITUTE ("váldit" V) ("váldit2" V) ("váldit" V) (*1 ("vuostá" Adv) BARRIER SV-BOUNDARY OR V) ;
#REMCOHORT TARGET ("vuostá" Adv) (*-1 ("váldit2") BARRIER SV-BOUNDARY OR V) ;



#!! !!For Apertium:
#!! The analysis give double analysis because of optional semtags. We go for the one with semtag.

LIST SEMTAGS = Sem/Fem  Sem/Mal  Sem/Plc  Sem/Sur  Sem/Org Sem/Veh ;

SELECT SEMTAGS ;
SELECT SUB:1 SEMTAGS ; #For Apertium
SELECT SUB:2 SEMTAGS ; #For Apertium
SELECT (cog) OR (top) OR (ant) ; #For Apertium

SUBSTITUTE (adv subqst ←cs→ @ADVL-ela→) (adv @ADVLcs-ela→) TARGET (adv subqst ←cs→ @ADVL-ela→) ; #Apertium
SUBSTITUTE (adv subqst ←cs→ @ADVL-ine→) (adv @ADVLcs-ine→) TARGET (adv subqst ←cs→ @ADVL-ine→) ; #Apertium
SUBSTITUTE (adv subqst @ADVL-ela→) (adv @ADVLqst-ela→) TARGET (adv subqst @ADVL-ela→) ; #Apertium
SUBSTITUTE (adv subqst @ADVL-ine→) (adv @ADVLqst-ine→) TARGET (adv subqst @ADVL-ine→) ; #Apertium
SUBSTITUTE (←hab→ @←ADVL) (←hab→ @←ADVLhab) TARGET (←hab→ @←ADVL) ; #Apertium
SUBSTITUTE (←hab→ @ADVL→) (←hab→ @ADVLhab→) TARGET (←hab→ @ADVL→) ; #Apertium
SUBSTITUTE (←ext→ @←SUBJ) (←ext→ @←SUBJext) TARGET (←ext→ @←SUBJ) ; #Apertium


#SUBSTITUTE (sem_year num) (num sem_year) ;
#SUBSTITUTE:apertium-unsubstitute (←vdic→) (*) TARGET (←vdic→) ;

SUBSTITUTE:apertium-unhide-derivtags (ex_vblex) (vblex) TARGET (ex_vblex) ;
SUBSTITUTE:apertium-unhide-derivtags SUB:1 (ex_vblex) (vblex) TARGET (ex_vblex) ;
SUBSTITUTE:apertium-unhide-derivtags SUB:2 (ex_vblex) (vblex) TARGET (ex_vblex) ;
SUBSTITUTE:apertium-unhide-derivtags SUB:3 (ex_vblex) (vblex) TARGET (ex_vblex) ;
SUBSTITUTE:apertium-unhide-derivtags (ex_adj) (adj) TARGET (ex_adj) ;
SUBSTITUTE:apertium-unhide-derivtags SUB:1 (ex_adj) (adj) TARGET (ex_adj) ;
SUBSTITUTE:apertium-unhide-derivtags (ex_n) (n) TARGET (ex_n) ;
SUBSTITUTE:apertium-unhide-derivtags SUB:1  (ex_n) (n) TARGET (ex_n) ;
SUBSTITUTE:apertium-unhide-derivtags (ex_tv) (tv) TARGET (ex_tv) ;
SUBSTITUTE:apertium-unhide-derivtags SUB:1  (ex_tv) (tv) TARGET (ex_tv) ;
SUBSTITUTE:apertium-unhide-derivtags (ex_iv) (iv) TARGET (ex_iv) ;
SUBSTITUTE:apertium-unhide-derivtags SUB:1  (ex_iv) (iv) TARGET (ex_iv) ;
#SUBSTITUTE:apertium-change-order (Num Sem/Year Sg) (Num Sg) TARGET (Num Sem/Year Sg) ;
#SUBSTITUTE:apertium-change-order (Sem/Year Num Sg) (num sg) TARGET (Sem/Year Num Sg) ;

	#=====#
      END #
	#=====#
