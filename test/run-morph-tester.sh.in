#!/bin/bash
# @configure_input@

# This is a shell script that will take one test file
# and run it through the Apertium Quality morph-test.py tool, using Xerox
# or Hfst transducers to the extent found.
#
# It takes three arguments: the transducer type, the file to be tested
#                           and the text to precede each output line, e.g.
#                           test run number.
#
# The script is typically sourced by another shell script listed in the TESTS
# variable in the Makefile.am file. This other shell script identifies the fst
# and the test file to be used.
#
# This file must be processed by ./configure before being used.

# Wrong usage - short instruction:
if ! test $# -ge 2 ; then
    echo
    echo "Usage: $0 TRANSDUCERTYPE TESTFILE RELPATH HALFTEST LEADTEXT"
    echo
    echo "were TRANSDUCERTYPE is the type of transducer targeted for testing,"
    echo "gt-norm, gt-desc, etc., and the optional TESTFILE is either a LexC"
    echo "file or a Yaml test data file, both containing test data."
    echo "RELPATH gives the relative path between the calling"
    echo "script and this script, and is used several places to"
    echo "find the correct location of required files."
    echo "HALFTEST is a string with one of the values 'ana', 'gen' or 'full',"
    echo "indicating that only the analyser, only the generator, or both are"
    echo "tested, respectively."
    echo "LEADTEXT is typically the number of the test in a test set loop."
    echo "LEADTEXT can contain spaces, it is effectively everything after the"
    echo "second argument."
    echo
    exit 77
fi

###### Variables: #######
transducer=$1
testfile=$2
relpath=$3
halftest=$4
shift 4
leadtext="$@"

testfileshort=$(echo "$(basename \
	$(dirname $testfile))/$(basename $testfile)")

# Identify the relative subdirs where the fst's are built by:
# getting the root test dir in the source tree ($GTLANG/test/):
roottestdir="$(cd "$(dirname "$srcdir/$relpath")"/.. && pwd)/"
# getting the absolute path of the $srcdir of the test script:
abs_srcdir=$(cd $srcdir && pwd)
# subtracting the root test dir from the test script source dir - the
# remaining intervening dirs equals the path to the fst dir as long as the
# directory structure within $GTLANG/test/ mirrors the structure of the other
# directories - this mirroring thus becomes imperative for the yaml testing:
fstdir=${abs_srcdir:${#roottestdir}:${#roottestdir}}

# The analyser files are built $relpath relative to the test dir, one further
# dir up, and then in the identified fst dir (see above):
analyserfile=./$relpath/../$fstdir/analyser-$transducer
generatorfile=./$relpath/../$fstdir/generator-$transducer
bare_fst_file=./$relpath/../$fstdir/$transducer
pythonbin=@PYTHON@
runtests="$pythonbin @GTCORE@/scripts/morph-test.py"

# Use autotools mechanisms to only run the configured fst types in the tests:
fsttype=
@CAN_HFST_TRUE@fsttype="$fsttype hfst"
@CAN_XFST_TRUE@fsttype="$fsttype xfst"

# Exit if both hfst and xerox have been shut off:
if [[ "x$fsttype" == "x" ]]; then
    echo "All transducer types have been shut off at configure time."
    echo "Nothing to test. SKIPPED."
    exit 77
fi

# Construct the correct argument for running either analysis, generation or
# both tests
if test "$halftest" == "ana" \
     -o "$halftest" == "speller"; then
    halftestoption="--surface"
elif test "$halftest" == "gen"; then
    halftestoption="--lexical"
else
    halftestoption=""
fi

function run_tests() {
# --output final/terse/compact/normal - OR:
# --silent
outputformat="--output final"
    if [ ! "$outputformat" == "--silent" ]; then
        if [ ! "$outputformat" == "--output final" ]; then
            echo
        fi
    fi
	$runtests \
		--colour \
		$outputformat \
		--ignore-extra-analyses \
		--section $section \
	    --app "$lookuptool" \
	    $fstoptions \
	    $halftestoption \
	    $testfile | tee -a testtotals.tmp.txt
	exitv=$( echo ${PIPESTATUS[0]} )

	# If the test failed, print instructions to rerun and get more details:
	if [[ $exitv -gt 0 ]]; then
	    let "Fail += 1"
        printf "\033[1;31mFAIL\033[m\n"
	    echo
	    printf "To rerun with more details, please triple-click, copy and paste"
	    echo " the following:"
	    echo
	    echo "pushd $(pwd); $runtests -c -i -v -S $section \
--app \"$lookuptool\" $fstoptions $halftestoption $testfile; popd"
	    echo
	else
	    if [ "$outputformat" == "--silent" \
	      -o "$outputformat" == "--output final" ]; then
	       printf "\033[0;32mPASS\033[m\n"
	    fi
	fi
}

###### Start testing: #######
transducer_found=0

# Loop over the transducer types first - we test both hfst and xfst if found:
for f in $fsttype; do
	# Remember to empty the variables between each for loop:
	analyser=""
	generator=""
	echo "1: $fsttype"
	echo "2: $halftest"
	if test $f == "xfst"; then
		lookuptool="@LOOKUP@ -flags mbTT"
		section="xerox"
		suffix="xfst"
	elif test $f == "hfst"; then
		lookuptool="@HFST_LOOKUP@"
		fastlookup="@HFST_OPTIMIZED_LOOKUP@"
		section="hfst"
		suffix="hfstol hfst"
	else
	    let "Fail += 1"
		echo "FAIL: Unknown fst type! FST=$f"
	    continue
	fi
	# Check whether the actual fst's exist, run the tests if true, FAIL if not:
	# First check for analysis tests only:
    if test "$halftest" == "ana" ; then
		for suff in $suffix; do
			if test -f "$analyserfile.$suff"; then
				analyser=$analyserfile.$suff
				let "transducer_found += 1"
				if test "$suff" == "hfstol" ; then
					lookuptool=$fastlookup
				fi
				break
			fi
		done
		# Only start a test run if an analyser was found:
		if test "x$analyser" != "x" ; then
			printf "$leadtext $(basename $analyser) + $testfileshort - "
			fstoptions="--morph $analyser"
			run_tests
		fi
	# Then check for generation tests only:
	elif test "$halftest" == "gen" ; then
		for suff in $suffix; do
			# Regular word form generation tests:
			if test -f "$generatorfile.$suff"; then
				generator=$generatorfile.$suff
				let "transducer_found += 1"
			# Generation tests for rule fst's:
			elif test -f "$bare_fst_file.lookup.$suff"; then
				generator=$bare_fst_file.lookup.$suff
				let "transducer_found += 1"
				if test "$suff" == "hfstol" ; then
					lookuptool=$fastlookup
				fi
				break
			fi
		done
		# Only start a test run if a generator was found:
		if test "x$generator" != "x" ; then
			printf "$leadtext $(basename $generator) + $testfileshort - "
			fstoptions="--gen $generator"
			run_tests
		fi
	# Then check for speller acceptor tests:
    elif test "$halftest" == "speller" ; then
    	echo "4: $suffix"
		for suff in $suffix; do
        	echo "5: $suff"
        	echo "6: $bare_fst_file.$suff"
			if test -f "$bare_fst_file.$suff"; then
				analyser=$bare_fst_file.$suff
				let "transducer_found += 1"
				lookuptool=$fastlookup
				break
			fi
		done
    	echo "3: $analyser"
		# Only start a test run if an analyser was found:
		if test "x$analyser" != "x" ; then
			printf "$leadtext $(basename $analyser) + $testfileshort - "
			fstoptions="--morph $analyser"
			run_tests
		fi
	# Finally check the full analysis + generation tests:
	elif test "$halftest" == "full" ; then
		for suff in $suffix; do
			if test -f "$analyserfile.$suff"    \
				 -a -f "$generatorfile.$suff"; then
				analyser=$analyserfile.$suff
				generator=$generatorfile.$suff
				let "transducer_found += 1"
				if test "$suff" == "hfstol" ; then
					lookuptool=$fastlookup
				fi
				break
			fi
		done
		# Only start a test run if an analyser and a generator was found:
		if test "x$analyser" != "x" -a "x$generator" != "x" ; then
			printf "$leadtext $(basename $analyser) + $testfileshort - "
			fstoptions="--morph $analyser --gen $generator"
			run_tests
		fi
	# FAIL - no fst found:
	else
		let "Fail += 1"
		if test "$halftest" == "ana" -o "$halftest" == "full"; then
			echo "FAIL: Analyser file not found! $(basename $analyser)"
			echo "FAIL: $analyser"
		fi
		if test "$halftest" == "gen" -o "$halftest" == "full"; then
			echo "FAIL: Generator file not found! $(basename $generator)"
			echo "FAIL: full path: $generator"
		fi
		echo "FAIL: referenced by: $testfileshort"
		echo "FAIL: in $(pwd)"
		echo "FAIL: testtype: $halftest"
	    continue
	fi
done
