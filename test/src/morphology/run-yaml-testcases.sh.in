#!/bin/bash
# @configure_input@

# This is a shell script that will loop over the *.yaml files found in this dir
# and run them through the Apertium Quality morph-test.py tool.
#
# It takes one argument: the transducer type.
#
# The script is typically called by a simple shell script listed in the TESTS
# variable in the Makefile.am file, and will then be automatically called when
# issuing 'make check'
#
# This script contains all the code to actually run the yaml tests. The only
# variable not given here is the transducer type used for the tests. That is
# given by the calling shell script.
#
# This file must be processed by ./configure before being used.

# Wrong usage - short instruction:
if ! test $# -eq 1 ; then
    echo
    echo "Usage: $0 TRANSDUCERTYPE"
    echo
    echo "were TRANSDUCERTYPE is the type of transducer targeted for testing,"
    echo "gt-norm, gt-desc, etc."
    echo
    exit 77
fi

###### Variables: #######
transducer=$1

analyserfile=${srcdir}/../../../src/analyser-$transducer
generatorfile=${srcdir}/../../../src/generator-$transducer
pythonbin=@PYTHON@
runtests="$pythonbin $GTCORE/scripts/morph-test.py"

# Use autotools mechanisms to only run the configured fst types in the tests:
fsttype=
@CAN_HFST_TRUE@fsttype="$fsttype hfst"
@CAN_XFST_TRUE@fsttype="$fsttype xfst"

# Exit if both hfst and xerox have been shut off:
if [ "$fsttype" == "" ]; then
    echo "All transducer types have been shut off at configure time."
    echo "Nothing to test. Skipping."
    exit 77
fi

###### Start testing: #######
transducer_found=0
Fail=0

# Loop over the transducer types first - we test both hfst and xfst if found:
for f in $fsttype; do
	if [ $f == "xfst" ]; then
		lookuptool="@LOOKUP@"
		section="xerox"
	elif [ $f == "hfst" ]; then
		lookuptool="@HFST_LOOKUP@"
		section="hfst"
	else
	    Fail=1
		echo "Unknown fst type!"
	    echo "$f - FAIL"
	    continue
	fi
	if [ -f "$generatorfile.$f" -a -f "$analyserfile.$f" ]; then
		let "transducer_found += 1"
		testfiles=$(find ${srcdir} -name "*_$transducer.yaml")
		if [ "$testfiles" == "" ]; then
			echo
			echo "*** Warning: No YAML data files found. Skipping test."
			echo "*** Filenames covered by this test needs to end in:"
			echo "***"
			echo "*** _$transducer.yaml"
			echo
			exit 77
		fi
		
		# Loop over the available yaml files, and run the tests:
		for file in ${srcdir}/*_$transducer.yaml; do
			(( i += 1 ))
			echo
			echo "Subtest $i - $section: Testing $file using $analyserfile.$f"
			echo
			$runtests -c -C -i -S $section \
				--app $lookuptool \
				--gen $generatorfile.$f \
				--morph $analyserfile.$f \
				$file
			if [ $? -gt 0 ]; then
			    Fail=1
			    echo
			    echo "Test failed. To rerun with more details, please do:"
			    echo
			    echo "pushd $(pwd); $runtests -c -i -S $section --app $lookuptool --gen $generatorfile.$f --morph $analyserfile.$f $file; popd"
			    echo
			fi
		done
	fi
done

# At least one of the Xerox or HFST tests failed:
if [ "$Fail" = "1" ]; then
	exit 1
fi

# Fail if no transducer were found:
if [ $transducer_found -eq 0 ]; then
    echo No transducer found
    exit 1
fi
